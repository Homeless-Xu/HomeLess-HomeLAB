Terraform 是一个安全和高效的用来构建、更改和合并基础架构的工具。

采用 Go 语言开发。Terraform 可管理已有的流行的服务，并提供自定义解决方案。



Terraform 的关键特性：

架构就是代码

执行计划

资源图

变更自动化





Docker 与 ECS
账户设定完毕后，就该设置服务的运行方式了。为此，我们使用了 Docker 与 EC2 容器服务（ECS）。

现如今，我们大多数的服务都运行在 Docker 容器内，包括 API 与数据管道。容器每秒钟接受成千上万次请求，每个月处理500亿事件。

Docker 的最大好处在于它使团队能够从零开始搭建服务。我们不再有一套复杂的设定脚本或 AMI ，我们只要给生产集群提供一张镜像就行了。无需状态性的实例，我们能保证在预发布环境和生产环境运行一模一样的代码。

设定服务在容器中运行后，我们选择 ECS 为调度器。

在一个高水平上，ECS 实际负责在生产环境下运行容器。它负责调度服务、将它们置于不同的主机中，在与 ELB 关联时零宕机重载。它甚至可以跨多个 AZs，从而达到更佳可用性。如果一个容器宕机了，ECS 会确保该容器在集群中的新实例上重启。

切换到 ECS 之后，极大地简化了运行服务的过程，无需再担心启动任务或设定实例。因为它很简单，只需要添加一个 Dockerfile，设定 task，再将其与集群关联即可。

在我们的配置中，Docker 镜像由 CI（持续集成） 构建，之后推送到 Docker Hub。当某项服务启动时，它从 Docker Hub 获取镜像，之后 ECS 在各个机器间调度之。





使用 Datadog 监控
至此，我们已经搭好了基础架构，开通了服务，做好了必要的隔离。最后要做的是监控生产环境中所有运行程序。

在新环境中，我们将所有的监控和指标都用 Datadog 进行。不夸张的说 Datadog 真的棒极了！

