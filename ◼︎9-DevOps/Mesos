🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸 SOA 🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸
https://www.ibm.com/developerworks/cn/webservices/ar-servgov/index.html



🔸 SOA 
SOA 提高IT 部门和各个团队间所需的合作和协调级别。

IT 是个很大的部门! 需要管理的! 怎么管理呢....

比如某人发现某个服务器异常, 于是关闭了. 
但是没告诉主管. 但是这个是非常重要的服务器,这下整个公司就瘫痪了.





🔸 SOA 治理


建立授权的责任链。
度量评估的有效性。
指导组织建立满足其目标的策略。
控制机制以确保遵从性。
进行沟通以使所有相关方都获得通知。




IT 治理是指针对 IT 的治理；即：针对 IT 组织及其人员、流程和信息应用治理，以提供指导，使这些资产支持业务需求。SOA 治理是 IT 治理的一种特殊化，其将关键 IT 治理决策置于服务组件、服务和业务流程的生命周期上下文中。SOA 治理对生命周期进行有效管理，生命周期是其关键目标。
IT 治理比SOA 治理更广泛。IT 治理涉及 IT 的所有方面，包括影响 SOA 的问题（如数据模型和安全性）以及 SOA 之外的问题（如数据存储和桌面支持）。SOA 治理重点关注服务生命周期的一些方面，例如：计划、发布、发现、版本治理、管理和安全性。


治理在 SOA 中比在普通 IT 中更为重要。在 SOA 中，服务使用者和服务提供者运行于不同的进程中，由不同的部门开发和管理，为了成功地一起工作，需要进行大量的协调工作。为了 SOA 能成功，多个应用程序需要能共享相同的服务，这意味着它们需要进行协调，以便共享和重用这些服务。这些就是治理问题，比采用独立应用程序时（甚至包括使用可重用代码和组件时）要复杂得多。
随着各个公司开始使用 SOA 来更好地保持 IT 与业务间的一致，可以使用 SOA 治理来非常理想地改进总体 IT 治理。如果公司要实现 SOA 的各种好处，采用 SOA 治理是非常关键的。对于 SOA 的成功，SOA 业务和技术治理不是可选的，而是必须使用的手段。



IBM 的 SOA Governance and Management Method (SGMM) 是一个完整的流程，用于执行 SOA 治理生命周期，以将治理应用于 SOA 生命周期。SGMM 包括四个阶段：
计划——确定治理的重点。
定义——定义 SOA 治理模型。
启用——实现 SOA 治理模型。
度量——改进 SOA 治理模型。






总结：治理对 SOA 的成功非常关键
本文说明了为什么 SOA 治理对企业的 SOA 成功非常关键。治理涉及到建立相关职责和授权负责方，而管理则涉及到确保治理策略实际执行。技术不仅可以用于设置治理，也可以用于执行管理。服务调用期间管理的治理可以由 ESB 进行有效的管理，可简化提供者和使用者的职责。
SOA 治理涉及很多方面，其中包括以下内容：
服务定义（服务的范围、接口和边界）
服务部署生命周期（各个生命周期阶段）
服务版本治理（包括兼容性）
服务迁移（启用和退役）
服务注册中心（依赖关系）
服务消息模型（规范数据模型）
服务监视（进行问题确定）
服务所有权（企业组织）
服务测试（重复测试）
服务安全（包括可接受的保护范围）
如何处理其中的每个方面本身都足以另外单独成文。
















🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸 微服务 🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸
          http://dbaplus.cn/news-21-464-1.html


🔸 微服务架构 

    亚马逊、Google、FaceBook，Alibaba 等等很多公司在使用微服务（micro services）

    微服务架构模式（Microservices Architecture Pattern）的目的是将大型的、复杂的、长期运行的应用程序构建为一组相互配合的服务，每个服务都可以很容易得局部改良。 


    ⦿ 缺点 
    微服务应用是分布式系统，由此会带来固有的复杂性

    开发人员需要处理 分布式系统的复杂性能! 
    服务种类和数量多了,管理难度自然提升很多.








🔸 巨型应用
    web 应用早期. 所有的功能模块都打包成一起. 放在一个容器内运行.
    当你应用不复杂.这么干可以, 但是当你应用复杂.这样的设计就会非常笨重!
    要修改任意一个地方,就需要从新部署整个应用. 
    编译时间也过长, 测试时间也长! 开发效率低!
    不利于更新技术框架. 除非你愿意重写整个系统. 就愿意你老板也不愿意的..


🔸 应用拆分
    当业务极速增长的时候. 基础设施也需要提高! 
    并发不够? 加web服务器就行; 数据库压力太大? 买更贵更强的数据库. 还不行就分库分表.

    但是还有更好的选择...三点入手. xyz轴立体模型.

    x轴: 水平复制: 增加多个web服务器.
    y轴: 功能分解: 不同功能的模块分成不同的服务.如 订单管理、客户信息管理、商品管理.
    z轴: 数据库扩展: 分表分库


    每个服务应该尽可能符合单一职责原则: 每个服务只做一件事,并把这件事做好.





🔸 客户端-服务器通信

    没用微服务: 客户端只要向一台服务器发送请求.

    用了微服务: 客户发需要向一群服务器发送请求.网络好坏严重影响客户端的用户体验.
    为了解决这个问题. 一般会在服务器集群全面加一个代理服务器: API gateway 
    代理服务器负责和客户端连接.就像mysql 集群一样有个代理的存在.


🔸 内部服务之间 的通信

    集群内部也是需要通信的!  主要有两种方式: 
    基于 HTTP协议的同步机制. 如: REST
    基于 消息队列的异步处理机制. 如: RabbitMQ

    两种通信机制都有各自的优点和缺点，实际中的系统经常包含两种通信机制。
    例如，在分布式数据管理中，就需要同时用到同步HTTP机制和异步消息处理机制。














🔸 Why need Mesos

    Docker 容器技术非常流行，很多企业也想尝试在生产环境构建Docker
    然而随着业务的规模不断扩大，对docker的管理和维护也对运维人员有一些挑战，
    使用一些开源的框架和服务满足互联网公司的基本需求是一种常见而高效的方式，
    本篇文章就简单介绍一下使用Mesos+Marathon来对docker集群进行管理和维护。






二、Marathon基础知识

        Marathon（马拉松）是一个全新的框架，它将Mesos变成一个更有活力的工具，进而可以在单一的集群上运行不同的应用程序。
它的设计宗旨就是让用户在同一组服务器之上，更智能地运行多种应用程序和服务——Hadoop、Storm，甚至一个标准的Web应用。Marathon出自于一家初创公司 Mesosphere之手，这家公司主要就是想构建一个数据中心操作系统，不过这个系统是运行在Apache Mesos集群管理软件之上，这也是 Twitter基础设施的重要组成部分。
        Mesos仅仅是适用于集群的管理，这意味着它可以隔离不同的任务负载。但是仍然需要额外的工具来帮助工程师查看不同系统上运行的工作负载。不然的话，如果某些工作负载消耗了所有资源，那么重要的工作负载可能就难以及时地获得资源。
        想要理解mesos和marathon之间的关系，简单粗暴的可以理解为mesos就是集群的内核，负责资源调度，而marathon则是集群的进程管理器(init.d/systemd)，用来管理应用的状态信息。


三、Zookeeper基础知识

        由于mesos组件之间的调度需要使用zk来共享配置信息，因此这里讲对zookeeper进行简单的介绍。
ZooKeeper是用来给集群服务维护配置信息，域名服务，提供分布式同步和提供组服务。
所有这些类型的服务都使用某种形式的分布式应用程序。
是一个分布式的，开放源码的协调服务，是的Chubby一个的实现，是Hadoop和Hbase的重要组件。
Zookeeper分为以下几个角色：
领导者（leader）：领导者负责投票发起和决议，更新系统状态
跟随者（follwoer）：follower用于接收客户请求并向客户端返回结果，在选主过程中参与投票
观察者：ObServer可以接受客户端连接，将写请求转发给leader节点，但ObServer不参加投票过程，只同步leader的状态，ObServer的目的是为了拓展系统，提高读取速度。
客户端：请求发起方

Zookeeper工作原理：

        Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。
        实现这个机制的协议叫做Zab协议。
        Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。
        当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。
        状态同步保证了leader和Server具有相同的系统状态。
        为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。
        所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。
每个Server在工作过程中有三种状态：
LOOKING：当前Server不知道leader是谁，正在搜寻

LEADING：当前Server即为选举出来的leader

FOLLOWING：leader已经选举出来，当前Server与之同步



四、Mesos+Marathon+Docker集群部署





🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸



🔸 
值得注意的是，Mesos 自身只是一个资源抽象的平台，要使用它往往需要结合运行其上的分布式应用（在 Mesos 中被称作框架，framework），比如 Hadoop、Spark 等可以进行分布式计算的大数据处理应用；比如 Marathon 可以实现 PaaS，快速部署应用并自动保持运行；比如 ElasticSearch 可以索引海量数据，提供灵活的整合和查询能力……

Mesos特性

可扩展到10000个节点
使用 ZooKeeper 实现 Master 和 Slave 的容错
支持 Docker 容器
使用 Linux 容器实现本地任务隔离
多资源调度能力（内存，CPU、磁盘、端口）
提供 Java，Python，C++等多种语言 APIs
通过 Web 界面查看集群状态
新版本将支持更多功能





新一代微服务架构与管理(Mesos+Marathon+Docker)







🔸 深入浅出Mesos（一）：为软件定义数据中心而生的操作系统


Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核。
Mesos最初是由加州大学伯克利分校的AMPLab开发的，后在Twitter得到广泛使用。




这就是为什么我一直兴奋地要在后面介绍Mesos，一个Apache开源项目。为什么我对Mesos如此兴奋？回想x86虚拟化之初对数据中心曾经的承诺：通过增加服务器利用率使其更高效，通过从物理基础架构抽象应用使其更敏捷。虽然收获颇丰，但是以虚拟机为单位，粒度仍不够精细，如果应用程序都过于庞大，那就难以充分实现这一承诺。如今，飞速发展的容器技术、分布式应用程序和微服务技术正悄然改变着我们对数据中心的运行和管理方式。

试想，可否整合数据中心中的所有资源，并将它们放在一个大的虚拟池里，代替单独的物理服务器；然后开放诸如CPU、内存和I/O这些基本资源而不是虚拟机？同样，可否把应用程序拆分成小的、隔离的任务单位，从而根据数据中心应用的需求，从虚拟数据中心池中动态分配任务资源？就像操作系统将PC的处理器和RAM放入资源池，使其可以为不同的进程协调分配和释放资源。进一步讲，我们可以把Mesos作为操作系统内核，然后将数据中心看为PC。这也是正是我想说的：Mesos正在改变数据中心，它让真正的SDDC成为现实。



接下来我先介绍下Mesos的历史。Mesos的起源于Google的数据中心资源管理系统Borg。
你可以从WIRED杂志的这篇文章中了解更多关于Borg起源的信息及它对Mesos影响。Twitter从Google的Borg系统中得到启发，然后就开发一个类似的资源管理系统来帮助他们摆脱可怕的“失败之鲸”（译者注：见上图）。后来他们注意到加州大学伯克利分校AMPLab正在开发的名为Mesos的项目，这个项目的负责人是Ben Hindman，Ben是加州大学伯克利分校的博士研究生。后来Ben Hindman加入了Twitter，负责开发和部署Mesos。现在Mesos管理着Twitter超过30,0000台服务器上的应用部署，“失败之鲸”已成往事。其他公司纷至沓来，也部署了Mesos，比如Airbnb（空中食宿网）、eBay（电子港湾）和Netflix。

Mesos是如何让Twitter和Airbnb这样的公司，通过数据中心资源更高效的管理系统，扩展应用的呢？我们从一个相当简单但很优雅的两级调度架构开始说起。



上图修改自Apache Mesos网站上的图片，如图所示，Mesos实现了两级调度架构，它可以管理多种类型的应用程序。第一级调度是Master的守护进程，管理Mesos集群中所有节点上运行的Slave守护进程。集群由物理服务器或虚拟服务器组成，用于运行应用程序的任务，比如Hadoop和MPI作业。第二级调度由被称作Framework的“组件”组成。Framework包括调度器（Scheduler）和执行器（Executor）进程，其中每个节点上都会运行执行器。Mesos能和不同类型的Framework通信，每种Framework由相应的应用集群管理。上图中只展示了Hadoop和MPI两种类型，其它类型的应用程序也有相应的Framework。

Mesos Master协调全部的Slave，并确定每个节点的可用资源，
聚合计算跨节点的所有可用资源的报告，然后向注册到Master的Framework（作为Master的客户端）发出资源邀约。Framework可以根据应用程序的需求，选择接受或拒绝来自master的资源邀约。一旦接受邀约，Master即协调Framework和Slave，调度参与节点上任务，并在容器中执行，以使多种类型的任务，比如Hadoop和Cassandra，可以在同一个节点上同时运行。

我将在接下来的文章中，详细介绍Mesos的体系结构和工作流。我认为，Mesos使用的两级调度架构以及算法、隔离技术让在同一个节点上运行多种不同类型的应用成为了现实，这才是数据中心的未来。正如我之前所述，这是到目前为止我所见过的，履行SDDC承诺最好的现成技术。

我希望这篇介绍让你受用并吊起你了解Mesos的胃口。接下来，我将带你深入技术细节，教你一些上手方法，还会告诉你如何加入社区。



