🔸 Jenkins 简介
    提供一种易于使用的持续集成系统. 使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。
    同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。


    Jenkins 是一个用于持续构建的可视化web工具，
    就是各种项目的的“自动化”编译、打包、分发部署，
    将以前编译、打包、上传、部署到Tomcat中的过程交由Jenkins，
    Jenkins通过给定的代码地址，将代码拉取到jenkins宿主机上，进行编译、打包和发布到web容器中。
    Jenkins可以支持多种语言（比如：java、c#、php等等），也兼容ant、maven、gradle等多种第三方构建工具，同时跟git、svn无缝集成，也支持直接与github直接集成。




🔸 架构

    1> 开发者将新版本push到git server (Gitlab)。

    2> Gitlab随后触发jenkins master结点进行一次build。(通过web hook或者定时检测)

    3> jenkins master结点将这个build任务分配给若干个注册的slave结点中的一个，这个slave结点根据一个事先设置好的脚本进行build。这个脚本可以做的事情很多，比如编译，测试，生成测试报告等等。这些原本需要手动完成的任务都可以交给jenkins来做。

    4> 我们在build中要进行编译，这里使用了分布式编译器distcc来加快编译速度。


    多个开发者  commot/push 到 gitlab 服务器.
    gitlab服务器有触发器.一旦有commit 就联系 jenkins 主服务器进行自动化操作.
    jenkins 主服务器把详细操作分配给kenkins从服务器.  从服务器上执行构建脚本.
    构建好后 发给真正的服务器.进行部署安装.






🔸 准备 java 环境 
    需要1.7+ 版本
    yum install java-1.8.0-openjdk -y
    java -version



🔸 安装 
    sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo
    sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
    sudo yum install jenkins -y


🔸 开机启动   sudo chkconfig jenkins on
🔸 启动       sudo service jenkins start
🔸 停止       sudo service jenkins stop
🔸 重启       sudo service jenkins restart
🔸 状态       sudo service jenkins status

🔸 端口检测.  
    netstat -nltp   里面的 l 测试是显示正在监听的端口. 不适合这里用 我们用
    nmap 127.0.0.1  看看8080 有没有起来.


🔸 日志文件: cat /var/log/jenkins/jenkins.log
🔸 配置文件: vi /etc/sysconfig/jenkins

🔸 外网访问
    • 配置    vi /etc/sysconfig/jenkins
        JENKINS_HTTPS_LISTEN_ADDRESS="0.0.0.0"
        JENKINS_PORT="8765"     • 修改端口 

    • 重启 sudo service jenkins restart
    • 端口: nmap -p 8765 127.0.0.1
    • 浏览器访问: 35.194.128.92:8765

🔸 获取登录密码 

    cat /var/lib/jenkins/secrets/initialAdminPassword

    很长一串. 
    3599c6e576fd4ec6a2c0da139aa44550



👹 插件安装失败

    原因很简单.
    你在服务器上执行 

        ✘✘∙𝒗2 ~ ➜ curl http://127.0.0.1:8080
        <html><head><meta http-equiv='refresh' content='1;url=/login?from=%2F'/><script>window.location.replace('/login?from=%2F');</script></head><body style='background-color:white; color:white;'>


        Authentication required
        <!--
        You are authenticated as: anonymous
        Groups that you are in:

        Permission you need to have (but didn't): hudson.model.Hudson.Administer
        -->

        </body></html>                                                                                                                                                                                                  
    意味着 jenkins has anonymous priviledges which is not allowing any connection.

    To solve this issue, you will have to do two changes:

    🔸 解决 两步
        ⦿ jenkins 用户分配到root组
            sudo usermod -a -G root jenkins

        ⦿ 外网访问设置
            vi /etc/sysconfig/jenkins 
            JENKINS_LISTEN_ADDRESS="0.0.0.0"

        ⦿ 重启服务
        sudo service jenkins restart









⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 使用 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️



🔸 Create First Admin User
xujian/ 0219 / 


 

 此外，Jenkins 提供了丰富的管理和配置的功能，包括系统配置、管理插件、查看系统信息、系统日志、节点管理、Jenkins 命令行窗口、信息统计等功能。试试看，您就会发现 Jenkins 非常好上手使用。



🔸 Jenkins插件

    Jenkins其实没有什么需要特别配置的，由于这次任务中需要利用Jenkins与git，gitlab协作，所以需要安装一些插件。在主面板上点击Manage Jenkins -> Manage Plugins。

    由于公司使用代理连接外网，首先需要为Jenkins插件安装配置proxy。点击Advanced标签即进入proxy设置页面。

    Aailable标签下就是可以安装的插件。

    要让Jenkins可以自动build git repo中的代码，需要安装GIT Client Plugin和GIT Plugin。
    要想Jenkins可以收到Gitlab发来的hook从而自动build，需要安装 Gitlab Hook Plugin。
    要让Jenkins可以在build完成之后根据TAP（test anything protocol）文件生成graph，需要安装 TAP Plugin。






🔸 插件安装

系统管理 ➜ 插件管理 ➜ 



新建任务.





🔸 新建项目/任务


项目名: Test ➜ 构建一个自由风格的软件项目 ➜ OK 

源码管理: 
    Git 
	Repository URL: https://github.com/Xu-Jian/mycms
随便选一个 github的 

构建触发器

构建环境

构建 ➜ 添加 exceute shell ➜ 输入命令
cd ${WORKSPACE} && ./gradlew build && mv ${WORKSPACE}/docker/jpetstore.war /usr/local/tomcat9/webapps


    cd ${WORKSPACE} WORKSPACE是jenkins的定义的环境变量，代表该项目对应的文件路径，该项目检出的源码也是该目录。类似的环境变量还有BUILD_NUMBER, BUILD_ID, JOB_NAME, JENKINS_HOME等等
    ./gradlew build 使用gradle 执行构建命令，将检出的源码编译打包为war包，这里我们使用的构建工具是gradle，如果是使用maven，可以mvn clean package
    mv {WORKSPACE}/docker/jpestore.war /usr/local/tomcat9/webapps/
    将打包好的war包手动放到tomcat的webapps目录下，以便Tomcat能启动该项目了







🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸插件🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸


🔸 插件:

在前面我们看见jenkins可以支持git, svn, maven等很多功能，这些都是Jenkins的插件.
jenkins本身不提供很多功能，我们可以通过使用插件来满足我们的使用.



🔸 必备插件:
要构建一个完整的Pipline，jenkins默认的功能是完全不够用的。 还好jenkins为我们提供了丰富的插件支持，所以再开始创建我们的jenkins任务之前先安装一些常用的必备插件吧。


🔸 常用插件列表

    Git Plugin (支持从git服务器获取代码)
    Clone Workspace SCM Plugin (用于支持不同job之间拷贝workspace的能力)
    Build Pipeline Plugin （用于创建pipline视图）
    Deploy Plugin （支持远程部署war/ear到应用服务器如Tomcat,Jenkins）



🔸 插件安装 
系统管理 ➜ 管理插件 ➜ 可选插件 ➜ 输入插件名进行过滤  ➜ 打勾 ➜ 直接安装 ➜ 等待完成并重启


4、Email Extension Plugin 
链接：https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin
作用：用于替换Jenkins自带的邮件发送，更加的强大










🔸 Jenkins Job

