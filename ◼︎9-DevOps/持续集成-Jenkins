我们选择Jenkins作为持续集成工具，其优点是提供web GUI配置界面，方便配置，还可以安装很多第三方插件（plugin）进行定制与扩展，功能强大。

其次选择Gitlab作为git server。Gitlab的功能和Github差不多，但是是开源的，可以用来搭建私有git server，也提供非常强大的web GUI，比如开发者互相review源代码的时候就会很方便。












譬如说，你开了一家公司，雇了很多码农在一起写代码。
你说，要用 Gitlab 做代码管理。
当一个码农在自己的开发机上写好代码之后，要合并到主分支里，
他首先要发起一个 Merge Request（MR），
这会在一个特定服务器上触发一次对他提交的代码的检查，包括代码格式检查、依赖关系检查以及单元测试等一系列检查，
等通过了全部检查，他就可以将代码合并到主分支，否则他需要按照错误提示进行修改，然后发起新一轮的检查。
然后呢，每天晚上 10 点会有一个定时任务从主分支上拿最新的代码，进行编译打包，最后将打包好的程序推送到一个服务器上保存，这个服务器叫做 Artifact Repository。
你又说，要每天将当天打包好的程序部署到测试环境上。
也就是说，一个码农晚上 10 点之前提交了代码，那他第二天就可以在测试环境上看到自己新提交的代码的效果了。
你还说，每一个月要在生产环境上部署一个稳定的发布版本。
以上三段内容是一个软件从开发到部署的流程的简单描述，也分别对应持续集成、持续交付以及持续部署。



持续集成、持续部署、持续交付、持续发布.


持续集成、持续交付、持续部署。个人理解就是 提前发现系统问题，提前暴露问题，这比在开发后期发现问题处理的成本低很多。很多时候 一开始的需求在开发的过程中会有所变化的，或在需求分析不充分的情况下  也能在开发过程中即时发现问题。


持续集成的核心思想是切分任务，缩短每次迭代的间隔（对应的是细小任务，同时也是对应的细小时间），然后持续集成的必要条件是要用自动化的方式替代那些重复的劳动，测试，部署，分析等。
如果不能做到自动化，持续集成最好还是一个想法，不然会把团队拖死。


集成工具jenkins相关可以关注http://www.ciandcd.com




持续(Continuous):  不断的获取反馈,响应反馈.



⦿ 集成: 在一起.
    • 提交是集成 代码从开发人员集中 commot 到服务器
    • 编译是集成 逻辑在一起
    • 部署是集成 部署包和环境在一起.
    • 测试是集成 功能在一起





⦿ 部署: 把程序部署到生产环境(集群)中.

⦿ 发布: 功能变化/对最终用户可见..

⦿ 交付: 将最终的产品发布到线上环境，给用户使用


部署到发布之间的阶段. 是一种能力.开发有能力频繁的部署.业务有能力随时发布. 







🔸 代码零库存.

    • 代码越早push出去. 用户越早用到. 快就是商业价值.
    • 用户越早用到.越早反馈.
    • 用户不反馈: 说明功能不符合客户需求. 好让市场人员及时调整策略.
    • 代码库存越多.越得不到生产检验.功能积压越多,代码交叉感染概率越大.下个release的复杂度和风险越高.
    • 代码库存越多,workflow的包袱越重, 管理成本越大. 敏捷越可笑.










如果说等到软件所有功能都完成了才向下个环节交付，导致所有的问题只能再最后才爆发出来，解决成本巨大甚至无法解决。
而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。
也就是模块化思想. 就像软件开发. 要分成函数 每个函数不同的功能. 每个函数的好坏立马能知道.

举个例子，你家装修厨房，其中一项是铺地砖，边角地砖要切割大小。如果一次全切割完再铺上去，发现尺寸有误的话浪费和返工时间就大了，不如切一块铺一块。这就是持续集成。装修厨房有很多部分，每个部分都有检测手段，如地砖铺完了要测试漏水与否，线路铺完了要通电测试电路通顺，水管装好了也要测试冷水热水。如果全部装完了再测，出现问题可能会互相影响，比如电路不行可能要把地砖给挖开……。那么每完成一部分就测试，这是持续部署。全部装修完了，你去验收，发现地砖颜色不合意，水池太小，灶台位置不对，返工吗？所以不如没完成一部分，你就去用一下试用验收，这就是持续交付。--------------------补充：从敏捷思想中提出的这三个观点，还强调一件事：通过技术手段自动化这三个工作。加快交付速度。










🔸 软件流程
    设计 ➜ 开发 ➜ 测试 ➜ 发布 ➜ 循环...


🔸 持续集成

    互联网软件的开发和发布，已经形成了一套标准流程，
    最重要的组成部分就是持续集成 Continuous integration，简称CI

    持续集成指的是，频繁地（一天多次）将代码集成到主干.



🔸 互联网项目流程简介

    每次迭代都会在上一个迭代的基础上增加几个新功能，
    并且公司要求开发人员在编码前要先提交该功能的单体测试和集成测试的代码，然后才能开始写代码（所谓的测试驱动开发），
    然后测试人员要负责写端到端的自动化测试代码。
    公司用Jenkins进行持续集成，SVN管理代码库，Git进行团队开发，Sonar进行代码质量检查。
    项目成员每天早晨都会收到Jenkins服务器发来的前一天的集成测试报告，通知前一天的提交是否完全通过。
    经历了这样一个持续迭代的过程，给客户交付的代码质量有保证，很少或几乎没有出现过回滚的情况。





🔸 持续集成流程

⦿ 1.) 提交 commit 
    开发者向代码仓库提交代码. 这是基础.

⦿ 2.) 测试 第一轮
    代码仓库对 commit 操作配置了钩子 (hook) 只要有代码提交了.就开始自动化测试.
    测试分好几种. 第一轮必须进行单元测试.

    测试种类:
        • 单元测试: 针对函数或模块的测试.
        • 功能测试: 针对成品的某个功能的测试
        • 端对端测试: 从用户界面到数据库的全链路测试


⦿ 3.) 构建

    通过第一轮测试，代码就可以合并进主干，就算可以交付了.
    交付后，就先进行构建（build），再进入第二轮测试。
    
    构建: 将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等.

    ⦿ 常用的构建工具:
        • Jenkins
        • Travis
        • Codeship
        • Strider


⦿ 4.) 测试 第二轮

    构建完成，就要进行第二轮测试。
    如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。

    第二轮是全面测试，单元测试和集成测试都会跑，有条件的话，也要做端对端测试。
    所有测试以自动化为主，少数无法自动化的测试用例，就要人工跑。
    需要强调的是，新版本的每一个更新点都必须测试到。
    如果测试的覆盖率不高，进入后面的部署阶段后，很可能会出现严重的问题。


⦿ 5.) 部署

    通过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。
    将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。

    生产服务器将打包文件，解包成本地的一个目录，再将运行路径的符号链接（symlink）指向这个目录，然后重新启动应用。这方面的部署工具有Ansible，Chef，Puppet等。


⦿ 6.) 回滚
    一旦当前版本发生问题，就要回滚到上一个版本的构建结果。
    最简单的做法就是修改一下符号链接，指向上一个版本的目录。













🔸 持续集成优点

    （1）快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。
    （2）防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。


🔸 持续集成目的

持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。
它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。
Martin Fowler说过，"持续集成并不能消除Bug，而是让它们非常容易发现和改正。"
与持续集成相关的，还有两个概念，分别是持续交付和持续部署。


🔸 持续交付

持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。
如果评审通过，代码就进入生产阶段。
持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。



🔸 持续部署
持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。
持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。
持续部署的前提是能自动化完成测试、构建、部署等步骤。它与持续交付的区别，可以参考下图。


一个是手动部署. 一个是自动部署.

