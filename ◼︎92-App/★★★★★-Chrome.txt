⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 Chrome  极品插件 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️


🔸 vimium/cvim 网页快捷键
    jk  上下滚动     hl    左右滚动         JK   书签左右       HL    前进后退
    d   page down    u     page up           r   刷新网页
    gg  网页顶部     G     网页底部         gs   查看网页代码
    gi  定位输入框   tab   切换输入框.      gf   框架间的选择
    b   打开书签     B     新标签打开书签    o   书签历史       O     新标签打开历史
    x   关闭书签     X     恢复关闭标签      f   打开接         F     新标签打开链接
    t   建空白页          光标定位地址栏


    ctrl tab 右书签   ctrl shift tab 前标签               com+1 第一书签    ctrl+9 最后书签
    yy 复制当前网页地址.                            yf 复制链接. 按下会有很多标签 选一个就是复制那个链接.
    p 当前网页打开 粘贴板内容.                       P 大写  新标签打开粘贴板里面地址.
    gu 跳转到父页面.就是浏览器地址上的 根网站吧
    i  进入 insert模式
    默认的~<c-e>~~<c-y>~ 表示Ctrl+e，按住ctrl再按e，~<c-y>~同理。

    搜索:
    /: 进入查找模式
    n: 循环? 查找 下一个 适合的搜索内容               N: 循环 查找上一个 适合的搜索内容



    J k     网页上下滚动
    Shift j k     标签页 左右移动
     
    D u   向上 向下 滚动半个屏幕
     
    G 连按两下   回到网页顶部
     
    Shift h l  网页里面前进后退 
     
    X 关闭当前页面   shift x   恢复关闭的页面
     
    O  相当于  浏览器的地址栏
     
    g＋s 查看网页源代码
     
    R 刷新网页
     
    shift＋／  查看vimium的帮助   各种快捷键汇总
     
    某些网页 不想用vim  可以在设置里面 排除这个网站  vim图标变灰色就对了





🔸 Proxy SwitchyOmega

    科学上网的必备神器，配合Shadowsocks使用，功能非常强大，

    提供多种代理模式，可以在不同的代理中自由切换，
    其中自动切换模式可以根据正则表达式决定哪些网址采用代理模式，哪些不采用代理。




⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 前端调试 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️


❤️ Chrome 工具简介：

    ⦿ Elements:
        看chrome打开某个网站所需要的的所有文件: html/css/js/jpg...
        还可以编辑这些内容更改页面显示效果!

    ⦿  Network:
        看网站使用了哪些资源、资源的大小以及加载资源花费的时间.
        也能看到哪些资源不能成功加载。
        还可以查看HTTP的请求头，返回内容等；

    ⦿  Sources:
        主要用来调试js

    ⦿  Timeline:
        提供了加载页面时花费时间的完整分析，所有事件，
        从下载资源到处理Javascript，计算CSS样式等花费的时间都展示在Timeline中.

    ⦿  Profiles:
        分析web应用或者页面的执行时间以及内存使用情况；

    ⦿  Resources:
        对本地缓存（IndexedDB、Web SQL、Cookie、应用程序缓存、Web Storage）中的数据进行确认及编辑；

    ⦿  Audits:
        分析页面加载的过程，进而提供减少页面加载时间、提升响应速度的方案；

    ⦿  Console:
        显示各种警告与错误信息，并且提供了shell用来和文档、开发者工具交互。
        强大的Chrome开发者工具提供了很棒的提示功能，当我们把鼠标悬停在某些项时，
        会显示一些很有用的提示信息，有时候我们可以得到意想不到的收获.
        此外，开发者工具还提供了Emulation功能，做移动开发时特别有用.







❤️ 一: Elements元素分析

    左右结构.左边A  右边B
    
    ### Styles
    查看编辑元素的样式. 会实时更新.

    ### Event Listeners
    观察元素绑定的事件

    1.  click       事件名称.点击啊 滚动啊 键盘啊 都可以
    2. .div1        事件索引名称( 通过什么绑定的)
    30. attachment  事件来源
    31. handler     包含事件的 主体内容????
    32. useCapture  事件是否向上冒泡.





❤️ 二: Network网络分析

    监控当前网页所有 http/https 请求的面板

    主题部分展示每个http请求.每个字段表示该请求的不同属性和状态.

    网络面板. 下面的瀑布图. 
    **显示文件先下载先后顺序.**
    **显示每个文件下载花费的时间**

    🔸 Network主体面板
        Name:      请求文件的名称
        Method:    方法(常见的: get post)
        Status:    请求完成状态
        Type:      请求类型
        Initiator: 请求源: 也就是说该链接通过什么发送（常见的是Parser、Script）
        Size:      文件大小
        Time:      请求/下载时间
        Timeline:  鼠标放上面 会有详细信息: 开始下载时间, 等待加载时间, 自身下载耗时...


    **单击任何一个请求. 都会有详细信息.**
    请求头信息. 
    回应头信息.
    等等...


    **状态码 304 都是缓存读取**

    ### 下载时间组成:
    其实... 反应时间很重要 . 
    TTFB 是浏览器收到首个字节的时间.也是真正开始下载的时间.
    下载内容其实不用花多少时间的..

    ### 等待下载时间 (TTFB)
    ### 实际内容下载时间












❤️ 三: Source 资源面板✔︎

    主要就是看 网页所有 加载的资源列表.
    还有cookie和local storage 、SESSION 等本地存储信息，在这里，我们可以自由地修改、增加、删除本地存储。

    **主要就是进行js代码调试的**

    ### 断点简介
    js文件里 行号之前. 单击就能设置/取消断点.
    设置断点后是不用刷新网页. 实时生效的. 
    只要触发了某个事件.执行了包含断点的那个函数就会进入断点调试.


    #### 断点状态:
    - 启用 高亮
    - 禁用 灰色
    - 无

    打开一个js文件.

    **断点不是随便设置的.**

    ### 错误断点设置
    比如有个 拖动条的函数. 
    你在这函数里面 设置断点.
    因为你没有拖动 拖动条 根本执行这个函数啊 也就没有所谓的停止了..



    ### 正确断点设置
    一个 点击大类过滤处 对应标签文章的函数.
    里面设置一个断点. 
    点击某大类 . 这时候
    js执行到断点处那行  会停止执行. 并且等待你的命令.


    ### 断点调试面板

    左下角的 {} 可以帮你格式化代码.
    也就是那种压缩成一行的文件.可以直接帮你解压.变得非常易读.


    右边会显示调试面板.
    - 停止调试.
    - 不跳入函数 继续执行下一行代码
    - 跳入到函数中
    - 从函数中跳出
    - 禁用所有断点.不进行任何调试
    - 程序运行异常是否中断开关.


    ⌃+G → 输入行号 → 会快速跳转到该行.


    **按 F10 可以一步一步的走下去.**

    **直接在js文件 元素处停留可以显示 这个元素的所有信息**


    ### Breakpoints
    运行某断点会自动高亮

    ### Scope:
    **列出了 断点处的 私有(Local)和公有(Global)变量信息**
    这样就可以知道 js执行状态.

    ### Watch Expression
    给目前的断点 添加表达式.
    使得每次断点玩下走一步 都会执行你写的js代码.
    这个 很可能导致你的代码被 重复执行 
    **所以建议 一次性的输出 当前断点处的信息**



    ### Event Listener
    这里几乎可以监听所有类型的事件. 功能大.类型丰富.









❤️ 四: Timeline 时间分析


    ### 网站性能: 加载&执行 性能
    加载性能通过 Network 开分析
    执行性能: 内存泄漏

    **web 高性能开发指南 非常经典书籍**

    ### Timeline 分区
    从上到下.分别是  时间轴精简版; 时间轴完整版; 内存信息;

    ### 时间轴精简版
    时间轴(从左到右).

    ### 时间轴完整版 (主要)
    区域1 的完整版. 更加详细.精准. 一般都在这个区域进行.

    每个请求都是一行!!!!! 
    **点击每个请求. 下方Bottom-up 处都有这个事件的详细: 加载+执行+渲染 信息**

    任何请求 都是先下载.然后看情况是执行/还是渲染. 这里可以看出该请求下载/渲染各自花了多少时间,对你的性能分析非常有用.

    比如:  nprogress.css : loading 150ms  scripting 750ms ...
    可以看出 趋势 执行是花了 绝大部分时间的, 而不是网络的问题....

    再比如: main.css : loading 150ms  , scripting 750ms...
    你要优化的话当然是优化css性能了... 当然css压缩下什么的 还能少点加载时间. 但重点就是优化css.



    这里的每一种颜色的横条 都有自己独特的意义.

    loading   → 蓝色 → 加载事件
    scripting → 黄色 → 脚本事件
    rendering → 紫色 → 渲染事件
    panting   → 蓝色 → 绘制事件


    每一次事件的触发都伴随着一系列的变化:
    html 的重新渲染.
    界面的 重新布局
    视图重绘.

    每个事件的发生都会引起一系列的变化.
    比如 内存的占用.


    ### 内存板块 (5种)

    JS Heap    蓝色   内存消耗.
    Documents  橙色   dom文档数
    Nodes      绿色   dom的节点数目
    Listeners  黄色   元素绑定的事件数

    ### 区域4



    Timeline 是用来记录和分许应用在运行时所有的活动情况.
    **用来排查应用性能瓶颈的最佳工具.**
    **Tips:避免浏览器插件对分析过程产生影响，建议在隐身模式下进行分析。**

    1. 首先看 底部的 彩色圆球
    这里写出了 颜色代表的意思.

    - 文件加载时间.
    - js文件执行时间
    - css文件渲染时间


    2. 横条 那里看哪个柱子最长(代表时间花的最多)
    3. 看最长柱子的颜色. 可以看出来是到底是 加载还是js运行还是css渲染花了很多时间.
    31. 如果是加载耗时. 那就...优化网络? 或者使用CDN..
    32. 如果是 js 运行时间长. 可能需要优化js代码
    33. 如果是 css 渲染时间长 就优化css...




    \*\*最好先在本地测试  这样可以避免网络方面的问题.网络优化最后弄..

    然后看 CSS / JS 加载时间... 有效东西是要css/js加载之后才显示主页的?

    这个是加载时间. 还是运行时间!!!

    下载资源.
    处理DOM
    页面布局渲染
    屏幕绘制元素等等 的时间.

    *强烈建议在浏览器隐身模式下使用这个工具，并且禁用一切无关的插件，因为这些插件会影响测试的结果。*



    目前大多数的显示器的刷新频率是60Hz，那么我们页面的绘制频率能达到60帧每秒是最好的，
    因为软件帧和硬件的刷新频率一致的话，页面能给人非常流畅的感觉，否则就会感觉到很卡，
    这样我们大概有16.6ms（1000/60）来完成每一帧的呈现，
    *这就是很多人说的“16.6ms”优化。*



    *找性能瓶颈最佳工具: Timeline*
    Tips:为了避免浏览器插件对分析过程产生影响，建议在隐身模式下进行分析。



    - 蓝色(Loading)：网络通信和HTML解析
    - 黄色(Scripting)：JavaScript执行
    - 紫色(Rendering)：样式计算和布局，即重排
    - 绿色(Painting)：重绘
    - 灰色(other)：其它事件花费的时间
    - 白色(Idle)：空闲时间




    FPS:  红色段.  longframe  代表帧速没达到60 会卡. 


    *TTFB ( Time To First Byte) *

    是最初的网络请求被发起到从服务器接收到第一个字节这段时间， 它包含了TCP连接时间，发送HTTP请求时间和获得响应消息第一个字节的时间。



    *Cache Read: 缓存读取* 从浏览器缓存中读取内容或者304响应的时间。


    *Connect: 连接时间*
    是创建TCP连接到服务器或者代理服务器所花费的时间，如果一个包含SSL的安全的HTTPS连接存在，Keep-Alive链接经常被用到，以避免多次重复的连接WEB服务器。
      
    *Send*
    是发送HTTP请求到服务器的时间，而且这个时间取决与发送请求的数据量的大小，
    例如，长的发送时间是由于用 PSOT方式上传文件造成的。
    \*  
    Wait: 等待时间\* 等待服务器响应消息的空闲时间，这个值包括网络延迟和服务器处理请求的时间。

    *Receive: 接收时间*
    从服务器读取响应消息的时间。这个值可以受到请求消息内容的大小，网络带宽和是否使用了HTTP压缩。


    *Blocked: 闭塞时间*
    包括所有的过程之前的时间（像，cache对比）和等待网络链接的时间，
    IE在每个主机名（像 http://www.microsoft.com/）下最多只创建两个当前的网络连接，
    而且要排队等待直到这个网络链接可用，通常，闭塞时间影响网页中图片加载时间的重要因素。
    *idle 时间很高  有5s+....*







    [https://segmentfault.com/a/1190000003991459]


    页面性能分析.


    而Chrome DevTools的Timeline则正是用来记录和分析应用在运行时所有的活动情况，它是用来排查应用性能瓶颈的最佳工具。



    ### Timeline工具栏介绍
    Timeline工具会详细检测出在Web应用加载的过程中时间花费情况的概览，
    包括下载资源、
    处理DOM事件、
    页面布局渲染、
    向屏幕绘制元素等。
    你可以通过分析Timeline得到的事件、框架和实时的内存用量，找出应用的性能问题。




    ### 底部圆球
    不同的颜色表示不同的事件.
    某种颜色的区块越长. 说明该事件耗时越长.

    蓝色(Loading)：   网络通信和HTML解析
    黄色(Scripting)： JavaScript执行
    紫色(Rendering)： 样式计算和布局，即重排
    绿色(Painting)：  重绘
    灰色(other)：     其它事件花费的时间
    白色(Idle)：      空闲时间



    ### 顶部的 横条. mode view
    可能会有红色区块: 说明在对应事件上执行的时间可能存在性能问题.






    ### 事件汇总

    loading 事件:
    Parse HTML  浏览器执行HTML解析
    Finish Loading  网络请求完毕事件
    Receive Data    请求的响应数据到达事件，如果响应数据很大（拆包），可能会多次触发该事件
    Receive Response    响应头报文到达时触发
    Send Request    发送网络请求时触发




    Scripting事件
    Animation Frame Fired   一个定义好的动画帧发生并开始回调处理时触发
    Cancel Animation Frame  取消一个动画帧时触发
    GC Event    垃圾回收时触发
    DOMContentLoaded    当页面中的DOM内容加载并解析完毕时触发
    Evaluate Script A script was evaluated.
    Event   js事件
    Function Call   只有当浏览器进入到js引擎中时触发
    Install Timer   创建计时器（调用setTimeout()和setInterval()）时触发
    Request Animation Frame A requestAnimationFrame() call scheduled a new frame
    Remove Timer    当清除一个计时器时触发
    Time    调用console.time()触发
    Time End    调用console.timeEnd()触发
    Timer Fired 定时器激活回调后触发
    XHR Ready State Change  当一个异步请求为就绪状态后触发
    XHR Load    当一个异步请求完成加载后触发


    Rendering事件
    Invalidate layout   当DOM更改导致页面布局失效时触发
    Layout  页面布局计算执行时触发
    Recalculate style   Chrome重新计算元素样式时触发
    Scroll  内嵌的视窗滚动时触发


    Painting事件
    Composite Layers    Chrome的渲染引擎完成图片层合并时触发
    Image Decode    一个图片资源完成解码后触发
    Image Resize    一个图片被修改尺寸后触发
    Paint   合并后的层被绘制到对应显示区域后触发








❤️ 五: Profile 性能分析

    监控 网页中各种方法 执行时间和内存的变化.

    简单说 就是 timeline 的数字化版本.

    Profiles界面分为左右两个区域，左边区域是放文件的区域，右边是展示数据的区域。在开始检测之前可以看到右边区域有三个选项，它们分别代表者不同的功能:
    • (Collect JavaScript CPU Profile)监控函数执行期花费的时间
    • (Take Heap Snapshot)为当前界面拍一个内存快照
    • (Record Heap Allocations)实时监控记录内存变化(对象分配跟踪)







❤️ 七: Audits:优化建议

    运行这个会提出 若干条网页优化建议.

    两大类: 网络加载性能. 界面性能.
    　
    Audits面板的网络优化建议参照的是雅虎前端工程师的十四条黄金建议。

    如果你还不知道这十四条建议，我推荐你去阅读《web高性能建站》这本书。
    相信会对你有帮助。






❤️ 八:

    **alert 数组会有问题,少用alert**
    **一个数组. html里面正常.但是alert只显示 Object**
    **ESC键 其他面板中显隐Console面板 非常实用**

    • Console:  用于输出和现实调试信息
    • Search:  在域名下查找文件和内容
    • Emulation :  启用移动开发模式
    • Rendering:  在界面显示各种监控信息








⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 Chrome Tips✔︎ 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️







---
layout: post
title: Chrome Tips
tags: Chrome
categories: Tooles
---


★★★★★ Google 搜索技巧
必须翻墙:  购买 ss 账号  淘宝买流量.

1. 双引号 "" 完全匹配    所有字 字序 都完全匹配

2. 减号  排除关键词.  关键字+空格+减号

3. 星号 通配符 代表单个的任何文字

4. inurl 搜索 网址中包含关键词的 页面

inurl:gov 减肥  政府和学校出来的结果 比较可信 .
1. filetype:pdf vim  指定文件格式搜索   重要信息 一般是 pdf 格式的.
2. site baidu.com inurl:wang 只搜索百度域名下的关键词
3. site baidu.com filetype:pdf
4. 有些要注册才能看的信息 谷歌搜索不到的
5. 用英文搜索 会有惊喜
10. 
1.  同时搜索近义词  
2. . . 指定年份内的结果
3. author:xujian vim教程 搜索xujian 发表的文件
4.  查询字词的定义:  define:name
5. 单位换算 44美元=?人民币    或者1000日元 in 人民币
12. 

本页内查找: ctrl+f
 com + l 直接选中浏览器 地址栏目.

同一程序内切换窗口: ⌘ esc   自带键盘程序自定义 
比如 多个 safari 窗口





1. 学会基本语法
2. 关键词的积累 每个行业的专业术语.

知道准确的文件名  → 用完全匹配搜索






显示DNS状态
地址栏
about:dns – 显示DNS状态


GDT 直接修改网页内容

只要在控制台里输入 
document.body.contentEditable=true
就能直接修改网页上的内容了.....

你不需要再傻傻地右键审查元素，编辑源代码了

获取某个dom 元素 绑定的事件...




Console 输出空行

console.log("\n" );




Console Misc
var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
console.log("m");
// 输出字符串m
console.log(m);
// 输出整个数组.
console.log(m.get('Michael'));
// 输出95





Chrome-Mac 教程


⌘ - N   新窗口
⌘ - O   用chrome 打开计算机文件

⌘ -  shift t   打开关闭的标签 能记录10个.
⌘ -  option    反向键切换左右标签
⌘ -  w         关闭当前 标签页
⌘ -  shift w   关闭当前窗口

delete 后退    shift delete 前进

⌘ -  m 最小化窗口
⌘ -  h 隐藏谷歌浏览器
⌘ -  option h 隐藏其他所有窗口
⌘ -  q 关闭浏览器


功能快捷键
⌘ -  shift b   开关书签栏
⌘ - -   打开设置
⌘ -  y 历史记录
⌘ -  shift j 下载内容

地址栏 快捷键
引擎关键字 空格 搜索关键词  回车 用指定的搜索引擎搜索

网址 ⌘ -  enter  在新后台标签打开网站

⌘ -  l             突出显示网址
⌘ -  p             打印网页
⌘ -  f             打开查找栏 
⌘ -  option i       打开开发者工具
⌘ -  option j     打开javascript 控制台
⌘ -  option u     网页源码

option 单击  下载链接
⌘ -  d 保存书签

⌘ -  +/- 缩放网页

空格 下一页




about:dns – 显示DNS状态



Chrome manual

⌘ - N   新窗口
⌘ - O   用chrome 打开计算机文件

⌘ -  shift t   打开关闭的标签 能记录10个.
⌘ -  option    反向键切换左右标签
⌘ -  w         关闭当前 标签页
⌘ -  shift w   关闭当前窗口

delete 后退    shift delete 前进

⌘ -  m 最小化窗口
⌘ -  h 隐藏谷歌浏览器
⌘ -  option h 隐藏其他所有窗口
⌘ -  q 关闭浏览器


功能快捷键
⌘ -  shift b   开关书签栏
⌘ - -   打开设置
⌘ -  y 历史记录
⌘ -  shift j 下载内容

地址栏 快捷键
引擎关键字 空格 搜索关键词  回车 用指定的搜索引擎搜索

网址 ⌘ -  enter  在新后台标签打开网站

⌘ -  l             突出显示网址
⌘ -  p             打印网页
⌘ -  f             打开查找栏 
⌘ -  option i       打开开发者工具
⌘ -  option j     打开javascript 控制台
⌘ -  option u     网页源码

option 单击  下载链接
⌘ -  d 保存书签

⌘ -  +/- 缩放网页

空格 下一页




Chrome-Developer-Tool 谷歌开发工具. (必学)
某元素 → 右键 → inspect → elements → style 这个元素效果具体是怎么生成的. 能显示是 那个文件的哪行!!!! 
比如Cards 主题左上角的标题 你想换个字体颜色. 但是你不知道修改哪个文件.这时候这个工具就有用了. 右键标题 → inspect → style 下就能看到 main.css 673行 是设置这个标题颜色的. 找到这个文件的这行.修改就可以了.



Change the title name ( top left title )
anon deceloper to the name you like . assets → css →→ main.css →→→ ⌘+F →→→→ search anon developer →→→→→ change it.

CSS file only one Line
sublime install a plugin: Html-css-js prettify use ⌘+shift+H 就可以把代码自动格式化!!!
CSS Html js 都有效.









@: ★★★★★ Google
必须翻墙:  购买 ss 账号  淘宝买流量.

1. 双引号 "" 完全匹配    所有字 字序 都完全匹配

2. 减号  排除关键词.  关键字+空格+减号

3. 星号 通配符 代表单个的任何文字

4. inurl 搜索 网址中包含关键词的 页面

inurl:gov 减肥  政府和学校出来的结果 比较可信 .
5. filetype:pdf vim  指定文件格式搜索   重要信息 一般是 pdf 格式的.
6. site baidu.com inurl:wang 只搜索百度域名下的关键词
7. site baidu.com filetype:pdf
8. 有些要注册才能看的信息 谷歌搜索不到的
9. 用英文搜索 会有惊喜
\10. 
7.  同时搜索近义词  
8. . . 指定年份内的结果
9. author:xujian vim教程 搜索xujian 发表的文件
10.  查询字词的定义:  define:name
11. 单位换算 44美元=?人民币    或者1000日元 in 人民币
\12. 

本页内查找: ctrl+f
 com + l 直接选中浏览器 地址栏目.

同一程序内切换窗口: ⌘ esc   自带键盘程序自定义 
比如 多个 safari 窗口

