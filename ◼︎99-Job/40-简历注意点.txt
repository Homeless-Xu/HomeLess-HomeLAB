
🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸


🔸 Devops 重点 
    熟悉工具 + 脚本能力


🔸 工具

    持续:  jekins 
    自动化部署/配置管理 :  ★ puppet/ansible 
    监控: ★ zabbix 

8. 熟悉nginx/HAProxy/MySQL/监控报警等的运维；


5. 有网络信息安全的实战经验;


.熟悉SOA、微服务等架构，熟悉PaaS云平台架构、原理及其实现


6. 有自动化部署/配置管理经验，如Ansible/Chef/Puppet;

4.	熟悉zabbix监控管理工具,熟悉puppet/saltstack/ansible中的一种；




evOps其实包含了三个部分：开发、测试和运维。

DevOps突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。



DevOps的一个巨大好处就是可以高效交付，这也正好是它的初衷。Puppet与 DevOps研究与评估（以下简称 DORA）协会主办的2016年DevOps调查报告中，根据全球4600位各IT公司的技术工作者的提交数据统计得出结论：高效公司平均每年可以完成1460次部署。与低效组织相比，高效组织的部署频繁200倍，产品投入使用速度快2555倍，服务恢复速度快24倍。

在工作内容的时间分配上，低效者要多花22%的时间用在为规划好或者重复工作上，而高效者却可以多花29%的时间用在新的工作上。所以这里的高效不仅仅指公司产出的效率提高，还指员工的工作质量得到提升。

DevOps另外一个好处就是会改善公司组织文化、提高员工的参与感。员工们变得更高效，也更有满足和成就感；调查显示高效员工的雇员净推荐值（eNPS:employee Net Promoter Score）更高，即对公司更加认同。

对于工程师而言，他们也是DevOps的受益者。微软资深工程师Scott Hanselman说过“对于开发者而言，最有力的工具就是自动化工具”（The most powerful tool we have as developers is automation）。工具链的打通使得开发者们在交付软件时可以完成生产环境的构建、测试和运行；正如Amazon的VP兼CTO Werner Vogels那句让人印象深刻的话：“谁开发谁运行”。（You build it, you run it）

作者：ServiceHot
链接：http://www.jianshu.com/p/688b3c66fc5d
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



早期时，大家虽然意识到了这个问题的，但是苦于当时没有完善丰富的技术工具，是一种“理想很丰满，但是现实很骨感”的情况。DevOps的实现可以基于新兴的容器技术，也可以在自动化运维工具Puppet、SaltStack、Ansible之后的延伸，还可以构建在传统的Cloud Foundry、OpenShift等PaaS厂商之上。

事实上，DevOps正在成为 IT行业的新标准，并且已经被业界广泛采纳，常见于云计算和容器技术。

同时，许多组织正尽力去理解 DevOps的全貌，这主要受限于他们专业知识上的缺乏和各种组织结构上的挑战。尽管面临这些挑战，DevOps还是渐渐成为一个主流运动，各个公司已经注意到DevOps加速发布的无限价值潜力：谁创新速度最快，谁频繁更新…谁就可能打通创新的任督二脉。DevOps正在改变着 IT组织发布软件的方式，这就像敏捷运动在过去十多年中所产生的影响。

作者：ServiceHot
链接：http://www.jianshu.com/p/688b3c66fc5d
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



开门见山，成为DevOps工程师的关键是关注以下几点。

1、零触摸式的自动化

你应该深刻了解下自动化，诸如基础设施配置，CI/CD管道，发布管理，安全补丁甚至客户反馈等所有内容的想法……这些可以让组织创新脚步更快：免去手工切换，并在引入后立即追踪并修复错误。

在这里就可以开始适度增加版本更新周期并获得客户的快速反馈，从而帮助您更快地改善产品和响应市场需求。这步可以带着你一直走向DevOps的最终涅磐。

DevOps交付管道的完全自动化，多去找找相关开源方案学习精髓之处吧，本文没什么捷径提供。

2、宽容度高的行动心态

开发在设计软件时多走一步，考虑一些常见的操作陷阱。这个环节如果开发环节就能注意到，那就非常好了，而不是遇到问题，然后才修复。

尝试通过创建一个作为设计评估模板一部分的清单来标准化这类过程。Microsoft有部分团队就总结了一些清单，其中考虑了部署和基础架构的要求。

坚信团结的力量。鼓励通过团建，跨团体游戏之类的形式相互认识。长久以往，可能会发现Slack渠道的沟通也不那么麻烦了，对每个人都开放包容，有助于更好地理解和对交叉团队的问题感同身受。

如何衡量DevOps的成功？

最终，您所有的努力都要转化为更快创新的业务目标。

DevOps策略成功的一些关键指标如下。

部署频率——部署到生产要多久？通过自动化，你可以随着每一个变化的生产进行持续部署。这是一个到达过程，每天至少一次作为目标并没有什么不妥。

代码更改的交付时间——将代码更改部署到生产中需要多久？这将衡量自动化管道的效率。目标：建议是不到30分钟，最好再结合自己实际情况调整。

回滚率——出错回滚频繁吗？这很可能意味着自动化流程需要改进，因为DevOps的整个目标是创建可预测且无错误的版本。如果回滚率高，那至少得提高回滚速度。这个是快速恢复的一个基本能力，把对业务的影响降到最低。

作者：ServiceHot
链接：http://www.jianshu.com/p/688b3c66fc5d
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。





采用DevOps的主要意图是在开发和运营团队之间建立更好的工作关系。有些建议是将团队安排在一起，将他们包含在彼此的流程和工作流程中，甚至创建一个能够完成任务的跨职能团队。不过在这种方式中，Dev仍然是Dev，Ops仍然是Ops。

DevOps工程师一词试图将Dev与Ops之间的差距模糊起来，并表示最好的方法是请一些可以搞定Dev角色以及处理所有Ops职能的工程师。简而言之，DevOps工程师可以是开发，主要是他们能通过运营的心态思考问题并具有以下技能：

1.❗️❗️❗️❗️ 熟练使用各种操作和自动化工具的经验；

2. ❗️❗️❗️❗️ 强大的脚本能力；

3. 在频繁测试和增量的时候从容不迫；

4. 了解Ops问题的来龙去脉，能在源头杜绝问题扩散；

5. 技能和逻辑相对开发更全面，让团队更好的协作。

作者：ServiceHot
链接：http://www.jianshu.com/p/688b3c66fc5d
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



Dev迁移到DevOps角色比以往任何时候都容易。交付自动化日益改善，DevOps平台通过最少的脚本轻松就能实现自动化。

Ops工程师能否迁移到DevOps角色？当然！但相对开发可能挑战更大一些，因为转换之前，严谨的编码技巧也得学习学习。不过编码启动阵营的变化，这可能相比几年前更容易过渡一些。






🔸 运维阶段
    人工运维 ➜  自动化运维 ➜ 智能运维


🔸 运维

⦿ 系统监控 
⦿ 部署发布
⦿ 


部署是运维日常工作很重要的组成部分，是属于计划内的工作，重复度高，必须提升效率。




🔸 可运维性能


① 配置管理


② 版本管理



③ 标准操作
运维日常有大量重复度高的工作需要被执行，从精益思想的视角看，这里存在极大的浪费：学习成本、无价值操作、重复建设的脚本/工具、人肉执行的风险等等。

倘若能在企业内形成统一的运维操作规范，如文件传输、远程执行、应用启动停止等等操作都被规范化、集中化、一键化的操作，运维的效率和质量将得以极大的提升。

④ 进程管理
包括应用安装路径、目录结构、规范进程名、规范端口号、启停方式、监控方案等等，被收纳在进程管理的范畴。做好进程管理的全局规划，能够极大的提升自动化运维程度，减少计划外任务的发生。

⑤ 空间管理
做好磁盘空间使用的管理，是为了保证业务数据的有序存放，也是降低计划外任务发生的有效手段。

要求提前做好的规划：备份策略、存储方案、容量预警、清理策略等，辅以行之有效的工具，让这些任务不再困扰运维。




⑥ 日志管理
日志规范的推行和贯彻需要研发密切配合，在实践中得出的经验，运维理想中的日志规范要包含这些要求：

业务数据与日志分离
日志与业务逻辑解耦
日志格式统一
返回码及注释清晰
可获取业务指标（请求量/成功率/延时）
定义关键事件
输出级别
管理方案（存放时长、压缩备份等）
当具体上述条件的日志规范得以落地，开发、运维和业务都能相应的获得较好的监控分析能力。



⑦ 集中管控
运维的工作先天就容易被切割成不同的部分，发布变更、监控分析、故障处理、项目支持、多云管理等等，我们诉求一站式的运维管理平台，使得所有的工作信息能够衔接起来和传承经验，杜绝因为信息孤岛或人工传递信息而造成的运营风险，提升整体运维管控的效率和质量。





🔸 要点四：容错容灾
在腾讯技术运营（运维）的四大职责：质量、效率、成本、安全。质量是首要保障的阵地，转换成架构的视角，运维眼中理想的高可用架构架构设计应该包含以下几点：


① 负载均衡
无论是软件或硬件的负责均衡的方案，从运维的角度出发，我们总希望业务架构是无状态的，路由寻址是智能化的，集群容错是自动实现的。

在腾讯多年的路由软件实践中，软件的负载均衡方案被广泛应用，为业务架构实现高可用立下汗马功劳。

② 可调度性
在移动互联网盛行的年代，可调度性是容灾容错的一项极其重要的运维手段。在业务遭遇无法立刻解决的故障时，将用户或服务调离异常区域，是海量运营实践中屡试不爽的技巧，也是腾讯QQ和微信保障平台业务质量的核心运维能力之一。

结合域名、VIP、接入网关等技术，让架构支持调度的能力，丰富运维管理手段，有能力更从容的应对各种故障场景。

③ 异地多活
异地多活是数据高可用的诉求，是可调度性的前提。针对不同的业务场景，技术实现的手段不限。

腾讯社交的实践可以参考周小军老师的文章“2亿QQ用户大调度背后的架构设计和高效运营”。

④ 主从切换
在数据库的高可用方案中，主从切换是最常见的容灾容错方案。通过在业务逻辑中实现读写分离，再结合智能路由选择实现无人职守的主从切换自动化，无疑是架构设计对DBA最好的馈赠。

⑤ 柔性可用
“先扛住再优化”是腾讯海量运营思想之一，也为我们在做业务架构的高可用设计点明了方向。

如何在业务量突增的情况下，最大程度的保障业务可用？是做架构规划和设计时不可回避的问题。巧妙的设置柔性开关，或者在架构中内置自动拒绝超额请求的逻辑，能够在关键时刻保证后端服务不雪崩，确保业务架构的高可用。





要点五：质量监控

保障和提高业务质量是运维努力追逐的目标，而监控能力是我们实现目标的重要技术手段。运维希望架构为质量监控提供便利和数据支持，要求实现以下几点：


① 指标度量
每个架构都必须能被指标度量，同时，我们希望的是最好只有唯一的指标度量。对于业务日趋完善的立体化监控，监控指标的数量随之会成倍增长。因此，架构的指标度量，我们希望的是最好只有唯一的指标度量。

② 基础监控
指的是网络、专线、主机、系统等低层次的指标能力，这类监控点大多属于非侵入式，很容易实现数据的采集。

在自动化运维能力健全的企业，基础监控产生的告警数据绝大部分会被收敛掉。同时，这部分监控数据将为高层次的业务监控提供数据支撑和决策依据，或者被包装成更贴近上层应用场景的业务监控数据使用，如容量、多维指标等。

③ 组件监控
腾讯习惯把开发框架、路由服务、中间件等都统称为组件，这类监控介于基础监控和业务监控之间，运维常寄希望于在组件中内嵌监控逻辑，通过组件的推广，让组件监控的覆盖度提高，获取数据的成本属中等。如利用路由组件的监控，运维可以获得每个路由服务的请求量、延时等状态和质量指标。

④ 业务监控
业务监控的实现方法分主动和被动的监控，即可侵入式实现，又能以旁路的方式达到目的。这类监控方案要求开发的配合，与编码和架构相关。

通常业务监控的指标都能归纳为请求量、成功率、延时3种指标。实现手段很多，有日志监控、流数据监控、波测等等，业务监控属于高层次的监控，往往能直接反馈业务问题，但倘若要深入分析出问题的根源，就必须结合必要的运维监控管理规范，如返回码定义、日志协议等。需要业务架构在设计时，前置考虑运维监控管理的诉求，全局规划好的范畴。

⑤ 全链路监控
基础、组件、业务的监控手段更多的是聚焦于点的监控，在分布式架构的业务场景中，要做好监控，我们必须要考虑到服务请求链路的监控。

基于唯一的交易ID或RPC的调用关系，通过技术手段还原调用关系链，再通过模型或事件触发监控告警，来反馈服务链路的状态和质量。该监控手段属于监控的高阶应用，同样需要业务架构规划时做好前置规划和代码埋点。。

⑥ 质量考核
任何监控能力的推进，质量的优化，都需要有管理的闭环，考核是一个不错的手段，从监控覆盖率、指标全面性、事件管理机制到报表考核打分，运维和开发可以携手打造一个持续反馈的质量管理闭环，让业务架构能够不断进化提升。








本文纯属个人以运维视角整理的对微服务架构设计的一些愚见，要实现运维价值最大化，要确保业务质量、效率、成本的全面提高，业务架构这块硬骨头是不得不啃的。

运维人需要有架构意识，能站在不同角度对业务架构提出建议或需求，这也是DevOps 精神所提倡的，开发和运维联手，持续优化出最好的业务架构。









两个简历 . 一个 PDF 一个Web 

🔸 Web 简历备份:
    就是一些文件而已.  用github.  rsync
    由于网站在Centos服务器上.没有视图界面! 只能用Git 命令行了



🔸 Why DevOps 

    传统运维地位是不如开发的 
    现在 DevOp 却比开发待遇好 
    框架搭好之后，几百台是一样管的



🔸 DevOps 背景要求

    实际的开发测试经验.
    运维/IT管理/数据中心.
    强调自己的系统管理与工作流自动化，配置管理和发布管理经验。





🔸 DevOps 核心
    敏捷与迭代
    持续集成和部署
    聊天运营和配置管理
    GitHub、QA和发布管理





🔸 DevOps 工具 


DevOps涉及到编码、测试、部署与加固等环节。工具是否合适取决于团队规模以及组织专业化程度。


软件配置管理和版本/发布(版本控制)巩固，包括Apache Subversion、Mercurial、Fossil等等，可以完善文档变更请求。当软件变更时，开发者可以更容易遵循公司的最佳实践与策略。

持续集成(CI)工具如Rational Build Forge、Jenkins和Semaphore能整合所有开发者的工作代码拷贝到一个集中版本。
这些工具适用于更大型的团队，其中的开发者们同时工作于相同的代码库上。


QA专家使用代码分析工具来测试软件的错误、安全和性能。如果你已经使用过HP的Fortify Static Code Analyzer，可以说说它是如何发现代码语言中潜在的安全风险。同样可以聊聊 GrammaTech的CodeSonar工具，如何使用它来定位内存泄漏、缓存欠载以及其他C/C++和Java代码的检查。

你需要掌握主语言命令——Ruby、C#、.NET、Perl、Python、Java、PHP、Windows PowerShell——并且能够在相关的操作系统环境下使用——Windows、Linux和Unix。



🔸 云经验

你有多少基于云的软件开发?
预计下一阶段的DevOps面试问题将问及你在云服务上的经验，可能涉及到DevOps的迭代、IT集成经验。
许多DevOps专家需要拥有与主要云服务提供商，如亚马逊网络服务(AWS)弹性计算云和谷歌云平台的经验。
分析你身边使用云平台的知识、提供新实例、编写新的软件以及通过云提供商的API或软件开发工具包来配置集群扩展计算能力，管理工作负载生命周期等。
这是一个讨论如何用基于容器的云来替代传统虚拟机的好时机。
基于事件的云如AWS Lambda提供另外一种软件开发方法，对有经验的DevOps候选者来说是个福音。
强调对第三方工具的全面了解能把DevOps带到云项目。专注于使用云，而不是刚上市的一次性成功项目或任务。
在面试时，谈及自己在处理大数据时的经验，以及如何采用云基础设施架构提高它的扩展性，以处理复杂的计算任务。




而且DevOps角色的职位描述通常还十分注重熟悉业务，在监管行业还会要求候选人熟悉ITIL实践。









🔸 QA 

DevOps结合了软件编码知识与质量保证(QA)技能，还有业务工作流程软件的持续开发以及部署。未来的开发者必须证明自己拥有足够的技能与知识来参与和管理DevOps组织。






🔸 DevOps 是什么

    ❗️❗️ devops 每个团队每个人都有各自的看法 ❗️❗️
    ❗️❗️ devops 每个团队每个人都有各自的看法 ❗️❗️


在很多传统的技术公司／政府／银行， developer 是不能操作 production server 的，甚至连 read-only 都不可以。 
在这样的公司里， 不是一天发布几次的问题，而是一个月发布几次的问题，
因为 developer 的一个修改可能需要牵扯到很多不同的团队， 譬如 dba ， system admin ， operation ／ support ，
虽然只是改了一行代码，但可能需要跟一堆人扯很多蛋 这样的流程让人痛苦。
但为了控制风险等原因，不得不存在，尤其是在金融行业里。


但是像 Facebook ， stackowerflow 这些公司，他们一天要 deploy 很多次。 

其实在面试的时候碰到不懂／不太了解的概念很正常，毕竟这年头炒作的东西太多， 你可以告诉他们你不了解，然后要求对方给你解释一下，同时也可以让他们给你更具体的职位描述，毕竟工作是双向选择的。 






就是很擅长写代码的运维....目标就是用一大堆的自动化脚本或者工具完全自动化的运维. 

实现的结果就是类似 AWS 那种用户点一下就能在后台跑一堆东西然后过一会就能拿到想要的虚机等等....





🔸 HAProxy  Web 高可用
    给基于TCP（第四层）和HTTP（第七层）的程序提供高可用、负载均衡和代理服务的解决方案，
    一般用在 web 站点上,和 mysql 数据库.


🔸 ProxySQL  数据库高可用.





6. 有资产管理平台、自动构建及部署系统、配置管理系统、监控报警平台等有实际建设经验者优先。










让我们谈谈你的教育和经验
突出强调你对DevOps原理的理解，并向面试官展示你的背景以及如何准备担任这个角色。
DevOps的职责范围各不相同，但大多数入门级DevOps角色需要具有计算机科学的学士学位或者相关领域经验，包括编码、QA测试以及IT基础设施组件等。更高级别的DevOps角色可能需要在系统架构与软件设计上的高级学位。
谈及你在虚拟化方面的认证，云计算和具体的编程语言。还有供应商提供的e-learning软件开发工具，如代码分析工具或系统管理与自动化工具，可以更完整的展现你的专业知识。
比较DevOps的招聘职位和你的简历。大多数入门级DevOps相关职位要求三到五年的代码开发与测试经验。DevOps涉及操作和部署，可能会要求至少四年的运营经验，例如在数据中心或云基础架构领域的IT系统管理工作。强调自己的系统管理与工作流自动化，配置管理和发布管理经验。
DevOps依赖于开发、测试与运营团队之间密切的合作关系，任何科学的管理后台经验都是值得在面试中分享的。让潜在雇主了解你如何让不同的团队客服障碍，共同努力，保持严格的发布计划，并适应新的工具与技术。
面试DevOps职位前必须牢记下列信息
敏捷与迭代
持续集成和部署
聊天运营和配置管理
GitHub、QA和发布管理
你的系统背景如何
DevOps专家需要在服务器和系统上具备运营经验，包括部署能够支持负载的网络硬件与架构部署。
一些DevOps工作需要额外的系统知识，包括服务器集群与高并发系统。在这个级别，DevOps工程师需要分析系统可用性并部署升级来提升效率、可扩展性与可用性或者弹性。需要具备坚实的操作系统与支撑技能，如网络安全、VPN和代理服务器配置。
DevOps依赖于虚拟化进行快速工作负载提供——为新虚拟机提供计算资源以支持下一次部署——所以需要对主要的虚拟化管理平台有详细了解。这包括备份、迁移以及生命周期管理策略，以便保护、优化与恢复计算资源。一些环境可能还很重视针对虚拟容器开发的微服务软件开发。
运营专家必须包括额外的系统管理工具知识，如Microsoft System Center、Puppet、Nagios和Chef。DevOps工作十分重视运营能力，如解决问题、故障处理和分析技能。
分享一些你是如何在节约开销的同时提升利用率，如服务器整合项目或资源分配与性能监控经验。
你正在使用哪些DevOps工具?
DevOps涉及到编码、测试、部署与加固等环节。工具是否合适取决于团队规模以及组织专业化程度。
软件配置管理和版本/发布(版本控制)巩固，包括Apache Subversion、Mercurial、Fossil等等，可以完善文档变更请求。当软件变更时，开发者可以更容易遵循公司的最佳实践与策略。
持续集成(CI)工具如Rational Build Forge、Jenkins和Semaphore能整合所有开发者的工作代码拷贝到一个集中版本。这些工具适用于更大型的团队，其中的开发者们同时工作于相同的代码库上。
QA专家使用代码分析工具来测试软件的错误、安全和性能。如果你已经使用过HP的Fortify Static Code Analyzer，可以说说它是如何发现代码语言中潜在的安全风险。同样可以聊聊 GrammaTech的CodeSonar工具，如何使用它来定位内存泄漏、缓存欠载以及其他C/C++和Java代码的检查。
你需要掌握主语言命令——Ruby、C#、.NET、Perl、Python、Java、PHP、Windows PowerShell——并且能够在相关的操作系统环境下使用——Windows、Linux和Unix。
你有多少基于云的软件开发?
预计下一阶段的DevOps面试问题将问及你在云服务上的经验，可能涉及到DevOps的迭代、IT集成经验。
许多DevOps专家需要拥有与主要云服务提供商，如亚马逊网络服务(AWS)弹性计算云和谷歌云平台的经验。分析你身边使用云平台的知识、提供新实例、编写新的软件以及通过云提供商的API或软件开发工具包来配置集群扩展计算能力，管理工作负载生命周期等。
这是一个讨论如何用基于容器的云来替代传统虚拟机的好时机。基于事件的云如AWS Lambda提供另外一种软件开发方法，对有经验的DevOps候选者来说是个福音。
强调对第三方工具的全面了解能把DevOps带到云项目。专注于使用云，而不是刚上市的一次性成功项目或任务。
在面试时，谈及自己在处理大数据时的经验，以及如何采用云基础设施架构提高它的扩展性，以处理复杂的计算任务。
谈谈你是如何具体管理接手的项目
强调自己置身于DevOps项目管理的问题中。框架化的围绕解决复杂的业务问题来讨论DevOps管理。
作为一名具有管理责任的专家，必须证明自己对DevOps项目管理策略有着清醒地认识。讨论你如何与团队制定目标、简化工作流程、维护范围(防止蠕变)，研究和推出新工具或框架，转换需求到工作流并跟进。包括如何配置管理与发布管理，还有采用其他工具来跟踪项目。
高级的DevOps角色，如首席DevOps工程师，需要更多商业头脑和人际交往能力。分享你如何解决纠纷与团队冲突的经验。
你还熟悉哪些工具可以帮助胜任这个角色?
这个DevOps面试问题可以真正提升你从“合格”到“理想人选”。
DevOps是如此的多元化与包容，它很少以编码、测试和系统结束。一个DevOps项目可能依赖于类似SQL或NoSQL的数据库平台，数据结构服务器如Redis或者配置与事件跟踪系统，如Redmine。
web应用程序是现代企业必备的，说明自己有Web服务器，如Microsoft Internet Information Services、Apache Tomcat 或其他Web服务器的应用背景。
遵循标准化方法来进行软件开发的组织都会寻找熟悉敏捷应用程序生命周期管理的技术人才与工具。
而且DevOps角色的职位描述通常还十分注重熟悉业务，在监管行业还会要求候选人熟悉ITIL实践。



































🔸 价值
    • 知识  可以通过网络获取.TCP/IP 协议. HTTP
    • 技能  完成某种任务的能力.  如软件开发.
    • 经历
    • 天赋
    • 人脉



    知识、技能、经历 差不多的模板. 千人一面!


    知识会淡忘，一段时间不用就扔掉了，所以在你的知识图谱里，一定有一些是你经常使用的，Linux、脚本.


🔸 我的知识
    HTML、CSS、JS、Bootstrap、SASS、ES6、Webpack、SEO、JSON、node.js 

    HTTP、TCP/IP、VLAN、

    Linux 

    shell、python、MySQL、MongoDB、Postgresql、


    ❗️❗️ 我们需要把自己最熟悉的三种知识标注出来，后面会派上用场。


🔸 梳理知识和技能.
    ❗️❗️ 每个人都有很多知识和技能，一定要找出你擅长的2~3种知识，2~3种技能，这将是你求职时的重要参考。
    ❗️❗️ 每个人都有很多知识和技能，一定要找出你擅长的2~3种知识，2~3种技能，这将是你求职时的重要参考。
    ❗️❗️ 每个人都有很多知识和技能，一定要找出你擅长的2~3种知识，2~3种技能，这将是你求职时的重要参考。

    人只有使用最擅长的技能去做事情，才能达到最好的效果。
    也就是说你找的工作要和你最擅长的技能有关. 这样通过率才高.


🔸 我的技能
    各种环境搭建
    用 jekyll 搭建 静态网站.
    用 DjangoCMS 搭建动态网站.
    个人网站运营




🔸 经历
    积累知识和技能的过程就叫经历.

    程序员的（学习、工作、项目）经历同样具有非常独特的价值，在求职过程中往往会发挥非常重要的作用。
    比如你做过视频项目，那再找类似做视频的公司就很容易脱颖而出；
    比如你做过图像处理相关的项目，进入美图秀秀之类的公司就相对容易……



        你负责的工作内容
        用到的知识、技能
        你对整个项目的贡献（最好可以量化）



🔸 项目经历 1

    【SSR 翻墙平台搭建】
    项目描述：
        购买3个VPS,自建翻墙服务器集群,方便自己和朋友.

    业绩：
        稳定运行半年, 注册用户300+

    职责：
    　　负责SS-panel前端、SSR后端的搭建已经维护.
    　　使用 Mysql主主热备 + proxysql 读写分离 实现高可用高性能.
        使用 BBR 进行网络加速, 提升翻墙体验.　　




    我没有列出前面所说三点对应的所有内容，个人亮点也没完全写出来，
    但你的心里一定要清楚，你发挥了什么关键作用，
    如果有攻克技术难点的经历和明显可以量化的业绩，一定要总结出来，面试时经常会被问到哦。






🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸   确立求职目标  🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸
找工作时都要忌讳一点：茫无目的，漫天撒网。

🔸 职业延续性
    跳一次槽换一个行业，跳一次槽换一条技术栈，这样极其不利于程序员的商业价值积累（知识、技能、业务等）。
    假如你不是第一次求职，就有必要考虑职业延续性。


🔸 成就事件挖掘职业兴趣
    在我们总结整理自己的工作、项目经历时，要特别留意那些让你特别有成就感的事件，它里面隐藏你的职业兴趣，可以挖掘出你今后乐意从事的职业方向。

    我们可以遵循STAR原则来回顾成就事件：

    S（Situation），背景情况，包括面临的障碍、限制或困难
    T（Task），任务，目标，想完成的事情
    A（Action），行动计划与步骤，如何克服障碍、达成目标
    R（Result），对结果的描述，重点关注你取得了什么成就

    通过这样的分析，你就可能找到自己的最佳技能和工作中最在意的点在哪里，就可以根据他们来确立新的职业目标。


🔸 聚焦行业、企业、职业

    聚焦的目的是缩小目标范围，节省时间和精力，
    深入研究分析，有针对性的对自己的商业价值进行优化组合，提高简历的吸引力，最后提升获取面试机会的概率。


    程序员 用技术针开发出对某个领域的软件.
    软件必然和目标需求 和 业务 密不可分.
    所以，程序员左手技术，右手业务，假如你对业务内容完全不感兴趣，很难想象你可以把软件做好
    因此，当你有了目标产业，目标公司，还要去了解这家公司做什么产品，是产品导向的公司，还是项目导向，还是外包为主，
    选择那家你对它的业务范围感兴趣的公司，不感兴趣的就果断筛掉。


    ❗️❗️❗️ 但有一个基本的原则，离夕阳产业和走下坡路的企业远点儿。❗️❗️❗️
    ❗️❗️❗️ 但有一个基本的原则，离夕阳产业和走下坡路的企业远点儿。❗️❗️❗️
    ❗️❗️❗️ 但有一个基本的原则，离夕阳产业和走下坡路的企业远点儿。❗️❗️❗️



    ⦿ 自我分析.
        会前端.会后端.会网络. 但是没有一个精通的.
        学过黑客技术. 也学过 IOS 开发.
        其实对devops 兴趣不是很大. 对网络安全技术更有兴趣.

        职业: 我锁定的第一个目标是 DEVOPS ，安全开发工程师.
        行业: 互联网
        企业: 之前都在小公司摸爬滚打，现在希望到比较大一点的公司里体验一下不同的工作氛围。


    ⦿ 劣势
        在锁定职位的过程中，还要考虑自己当前的劣势，以便在简历和面试过程中妥善应对。
        以我为例，如果找软件开发工作，就有两个不好的点：

        最近一年没做什么开发工作，会被人质疑廉颇老矣尚能饭否
        最近几年都在做技术管理工作，别人可能会奇怪你为什么倒回去做开发
        这两点也会影响到目标职位的选择和匹配度，比如有的高级开发工程师职位要求有一定团队管理经验，那和我的匹配度就高一些。







🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸   【03】简历优化实操  🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸🔸

🔸 简历优化要点：

    • 分析招聘信息，提取知识、技能、职责当中的关键词
    • 根据招聘信息里的关键词，筛选个人知识、技能、经历
    • 将匹配到的知识、技能、经历重新组织、呈现



职位:devops、经验:1-3年、薪资:15+

1、熟悉Centos，能够定位故障并处理；
4、熟悉自动化运维工具puppet等
5、了解主流虚拟化、分布式文件系统，并有实施经验。
6、熟悉至少一种脚本语言(Shell、Perl、Python皆可)；

7、熟练掌握Nginx、APACHE、php、Fastcgi、memcached、mysql、

HAproxy、mfs, redis，等常用软件的安装,配置和管理；


熟悉mysql数据库的部署管理和相关参数的优化。
8、熟悉zabbix、Cacti等运维监控的安装、配置;
9、了解网络原理，熟悉网络相关配置;
12、有aws相关DevOps工作经验，优先录用。

3.熟悉SQL Server数据库，熟悉数据库镜像、发布订阅等高可用方案熟练使用Shell，Python4.熟悉常用的开源软件（如：nginx，redis，mysql，mongodb，zabbix，zookeeper,consul，Ansible，ELK等）；
4.具有强大的学习意愿和学习能力，有意愿往DevOps方向发展；
5.具有积极的工作态度、较强的逻辑分析能力、独立思考判断问题的能力，能够很好地与团队成员沟通。

3、了解MySQL数据库开发，熟悉SQL语句；

6、具备好奇心和非常强的学习能力；有较强的逻辑思维能力和沟通能力；具有良好的团队合作精神，责任感强并能承受工作压力。


Redis

2.熟悉Linux操作系统，计算机网络等，基础知识扎实 

3.熟悉LNMP环境,配置,管理和排错

5.有良好的时间观念，能很好的沟通交流，乐于分享 

6.了解或熟悉ELK,Jenkins,Zabbix,Dubbo,MySQL,XenServer优先.
7.Linux系统下熟练使用golang或Python优先

－熟悉Linux操作系统,以及KVM、Xen、Docker等虚拟化/容器技术;

－熟悉Jenkins、Grafana、ELK、Zabbix、Ansible等开源系统的使用;
－熟悉或使用过MongoDB、HBase等NoSQL技术者更好；
－对技术有热情，关注开源技术，有实际开业项目经验者优先；

3.了解MySQL，mongodb,redis等数据库；

4.了解DevOps的概念，能够熟练使用BASH、Python脚本；






网络安全:
4、熟悉大容量数据库程序开发，熟悉mysql/mongodb/oracle/redis任一种以上的数据库

具有数据挖掘、爬虫、WEB开发等经验优先。


熟悉运维和发布流程优先。

熟悉docker管理，有docker项目经验优先。

搭建过高并发、开发过分布式系统优先。

有网络安全基础优先。

具备全栈和devpos理念优先。

2. 熟悉网络安全技术：包括端口、服务漏洞扫描，程序漏洞扫描分析检测、权限管理、入侵和攻击分析追踪、病毒木马防范等；
3. 具备对风险进行识别、评估、定性/定量分析，以及设计应对措施的能力 ；

6、熟悉主流的Web安全技术，包括SQL注入、XSS、CSRF等常见的安全漏洞利用； 

7、熟悉相关网络安全产品，如防火墙、IDS、防病毒，漏洞评估工具等； 

8、熟悉常见攻击和防御办法，熟悉web/移动安全和渗透技术,能自行进行web渗透测试，恶意代码监测和分析； 


2.熟悉网络安全领域相关知识，熟悉系统漏洞/WEB漏洞的原理和相关知识背景；
7.熟悉网络知识，各网络协议。
2. 精通TCP/IP 等网络协议，熟悉应用层协议，及协议分析。
3. 熟悉网络安全协议及路由器、交换机、防火墙等安全设备。
4. 熟悉主流防火墙、IPS、VPN、WAF、防数据泄漏、入侵检测、攻防技术、漏洞扫描、入侵防御、防病毒
5、认证、审计等信息安全技术,网络攻击、系统加固等安全技术者优先。




















































## 个人素质

高效的学习能力.
解决问题的能力.
帮人解决问题.
被人所依赖!


- 平常心: 面试时候谈架构/大数据.其实90%时间都是很基础的东西
- 监控意识非常重要.
- 偷懒的心: 能用脚本坚决用脚本.能自动化必须自动化.
- 记录分析意识		分析程序不正常运行的原因.

细心: 任何操作 都要再三确认.
学习: 遇到问题要记录.分享


大量优秀的开源系统/平台不断涌现，解决原来低效的运维工作，降低运维成本，
因此，作为一名运维工程师，对开源软件的学习应该成为基本的技能之一；

















# Skilles

负载均衡
冷备
热备
高可用
异地容灾
故障监控
确保备份可用
避免单点


知道各类型的服务器:塔式,机架式,刀片式


远程工具: RDP/VNC/Jumpmydesktop … 
Log 日志分析
磁盘分区:fdisk / parted 

用户管理 文件系统管理






## 网络服务

公司最关键的绝对是web服务器.
nginx 和 apache 必须熟悉.特别是 nginx.


## 脚本方面
shell + python/perl/php 中的一个.

shell 必须.至少能写出系统管理的脚本.
最简单也得写个 监控cpu. 内存比例的脚本.
写系统脚本 才最有意义.



## 文本处理命令
sort , tr , cut, paste, uniq, tee等必学：Linux运维工程师视频课程（系统命令）


## 数据库

首选MySQL，因为linux用得最多绝对是MySQL，增删改查必学，特别要学熟查，运维人员

## 防火墙
不学不行，防火墙也算是个难点，最重要弄懂规则，如果学过CCNA的朋友可能会比较好学，因为iptables也有NAT表，原理是一样的，而FILTER表用得最多，反正不学就肯定不合格。

## 监控工具
最好学这3个：cacti，nagios，zibbix，企业用得最多应该是nagios和 zibbix。

## 集群和热备
集群工具有很多，最好学是LVS，这是必学，最好也学学nginx集群，反向代理，还有热备，这个就更多工具能实现了。


## 数据备份
至少要把RAID的原理弄懂，特别是企业最常用的1+0或0+1，自己做实验也要弄出来，备份工具有很多，如tar, dump, rsync等，最好多了解一下。建议先学熟shell，等工作后再学另一门脚本语言，这样会比较好。





## 网络

路由交换



- <<TCP/IP 协议详解>> 
- 熟练使用 Wireshark / tcpdump 等抓包工具






## 安全方面

信息安全 逛乌云


- 任何操作 最好先搞明白原理.


复杂操作:
先写详细计划文档. 细致到每个命令.请人审核


加密工具储存密码: ipassword
truecrypt

本地存储,不用网盘.
SSH 私钥添加密码.

遇到报警 第一时间处理  不要等别人.
无法处理 找同事帮忙.不能拖....



