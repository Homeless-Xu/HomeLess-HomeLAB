⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵  精简 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️

🔸 文件内容替换:  ✔︎
	sed -i '/SELINUX=enforcing/c SELINUX=disabled' /etc/selinux/config







⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵   🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️


# 三剑客 & 正则式

## 字符三剑客 Grep AWK SED

‼️grep: 用正则式搜索文件.打印出匹配条件的行.
‼️awk:  将一行文本分成数个“字段”来处理.
‼️sed:  替换/添加/删除/内容.
❗️并不是说 只有grep能找出匹配行. awk也可以的.只是用grep 更加合适罢了❗️

grep sed awk.正则式. 结合起来 能在千万文件中.找到你想要的.
先用grep从文件中匹配出几行,
再用 awk从这些行中 取出需要的列.
最后 sed处理数据. 比如75% 可以删除% 得到75 













## Grep
'' G + re + P
'' Global search regular expression(RE) and Print out the line，
'' 用正则式 进行全局搜索 打印出匹配行
'' 
'' 🎈Grep 实例🎈
'' 	示范文本 1.txt
'' 		var now = new Date();
'' 		console.log(now);
'' 		console.log(now.getFullYear());
'' 		console.log(now.getMonth());
'' 		console.log(now.getDate());
'' 		console.log(now.getDay());
'' 		console.log(now.getHours());
'' 		console.log(now.getMinutes());
'' 		console.log(now.getSeconds());
'' 		console.log(now.getMilliseconds());
'' 		console.log(now.getTime());
'' 
'' 
'' 	实例
'' 		➜  Desktop grep Day 1.txt
'' 		console.log(now.getDay());
'' 		// 包含 Day 的行.
'' 
'' 
'' 		➜  Desktop grep day 1.txt
'' 		➜  Desktop
'' 		// 无匹配结果
'' 
'' 
'' 		➜  Desktop grep -i day 1.txt
'' 		console.log(now.getDay());
'' 		// i 忽略大小写
'' 
'' 
'' 🎈Grep 语法🎈
'' ls -l | grep -i xxx  过滤出 含有不区分大小写的xxx字母的文件.
'' 	-v	反向匹配，输出不匹配的行。例如，grep -v "test" demo.txt
'' 	-n	输出匹配的行以及行号。
'' 	-l	输出匹配的行所在的文件名。
'' 	-i	不区分大小写


## ACK 
99% 的时间你可以用ack 替代 grep.  但是偶尔还是需要 grep的...
ack 可以直接搜索 包括子文件夹在内的 整个文件夹.
用 grep 虽然也能实现但是比较复杂非常适合搜索代码库. debug 利器.
Perl 编写.












⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️



## AWK
'' Aho、Peter Weinberger、Brian kernighan  三个创始人的首字母.
'' ‼️AWK: 每行分成几个字段. 适合处理有固定结构的数据.‼️
'' 
'' 
'' 🎈AWK 常用实例🎈
'' 
'' ls -l                             → drwxr-xr-x@  6 v  staff          544 Mar  2 14:55 AV
'' ls -l | awk '{print $1}'          → drwxr-xr-x@     输出某字段(某列)
'' ls -l | awk '{print $1,$2}'       → drwxr-xr-x@ 10  输出多字段(多列)
'' 
'' 运算符: == 、!= 、< 、> 、<= 、>= 
'' ls -l | awk '$2==3'               → 匹配第二个字段值是3的数据
'' ls -l | awk '$2>3'                → 匹配第二个字段值大于3的数据
'' ls -l | awk '$2==3 && $6=="Mar"'  → 匹配第第二个字段值是3 且 第六字段是Mar. ★必须注意双引号★
'' 
'' ls -l | awk '/AV/'                → 匹配带有 AV           的文件/文件夹
'' ls -l | awk 'length>100'          → 匹配长度大于100       的行
'' 
'' awk '/LISTEN/' te.sh              → 显示带有 LISTEN       的行.
'' awk '/LISTEN|TIME/' te.sh         → 显示带有 LISTEN或TIME 的行
'' awk '!/TIME/' te.sh               → 显示没有 TIME         的行.
'' awk '/Day/{print $1,$2}' 1.txt`   → 显示含有Day 行的第一和第二字段.
'' 
'' 
'' 
'' 
'' 🎈AWK 复杂实例🎈 
'' 
'' 分割符号换行
'' echo 1,:2,:3,:4 | awk -F',:' -v OFS='\n' '{$1=$1;print $0}'  
'' 
'' 
'' awk -F. 'BEGIN{OFS="..."}{print $1,$2,$3}' 1.txt`
'' 	用.当作分割符, 且用... 代替. 而不是删除.
'' 	BEGIN{} 是awk一开始先做 初始化操作: 也就是 设定变量 OFS="...".
'' 	变量 OFS的作用是 储存 分割符号.
'' 	然后开始用print 打印出 字段.
'' 
'' 
'' ★ 99 乘法表详解 ★
'' seq 9 | sed 'H;g' | awk -v RS='' '{for(i=1;i<=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")}'
'' 
'' seq 生成整数 
'' 	seq 2  → 1,2 
'' 	seq 9  → 1,2,3,4,5,6,7,8,9
'' sed H;q
'' 	高级命令,不怎么用. 就是生成
'' 	seq 9 | sed 'H;g'   输入到终端 自己看效果吧.
'' 
'' 	sed: 接收数据 处理后 输出
'' 	sed 处理数据有两个空间: Pattern Space 和 Hold Space
'' 
'' 
'' 
'' 
'' 
'' 常用语法
'' 	awk '找谁' 文件:        显示符合样式的行.
'' 	awk '{干啥}' 文件:      对每一行都执行 {}里面的操作.
'' 	awk '找谁{干啥}' 文件:  对符合样式的数据行. 执行{}中的操作.
'' 		必须用单引号.防止shell做解释!!
'' 		干啥是一个动作. 动作都是被{}包裹的.
'' 
'' $0 所有的字段 也就是整行
'' $1 第一个字段
'' $2 第二个字段
'' $n 第n 个字段
'' 
'' 
'' 
'' 
'' 指定分割符:
'' 	-F 指定分割字符  (输出内容是看不到分割符的)
'' 
'' 	✘✘∙𝒗 Desktop ➜ LocateMe | awk '{print $1}' | awk -F, '{print $1,$2}'
'' 	<+31.20916791 +121.44031011>
'' 	✘✘∙𝒗 Desktop ➜ LocateMe | awk '{print $1}' | awk -F, '{print $1}'
'' 	<+31.20916791
'' 	✘✘∙𝒗 Desktop ➜ LocateMe | awk '{print $1}' | awk -F, '{print $2}'
'' 	+121.44031011>
'' 
'' 删除行: d
''  ls | sed '2,4d'
'' 删除ls列出来的 2-4行.
'' 












## SED
'' SED: stream editor，流编辑器. ( 在Script执行过程中 动态修改文件 )
'' ‼️‼️Mac(BSD)/Linux(GUN) sed命令不通用:比如 i 上一行插入,有些就得用G参数;‼️‼️
'' ❗️sed 工作模式: 比对  每一行  数据.符合样式就执行指定的操作❗️
'' ❗️sed 默认处理的不是源文件 而是源文件的拷贝❗️
''
'' 
'' 
'' 修改源文件 -i (没有i参数默认是修改副本的)
'' 	➜  Desktop sed -i 's/$/xujian/' 1.txt
''
'' 文件导出 
'' 	➜  Desktop sed 's/$/xujian/' 1.txt > changed.txt
'' 		每行行尾都加上xujian 后 导出到新的文本.
'' 
''  
'' SED 语法: sed '命令' 文件名
'' 	删除(d) 或取代(s).
'' 
'' 	命令: 用一对// 表示寻找的意思,也可以指定数据行的范围.
'' 			/AAA/,/DDD/ 表示: 作用范围从 含有 AAA的数据行 到 含有DDD 的数据行.
'' 
'' sed -n '/Day/p' 1.txt  显示包含Day的行.
'' 	p (print) 显示sed处理前的所有数据! 不是处理后的数据
''  	n 只显示sed处理过的行
'' 	要只显示符合样式的数据行: `n` 参数: 来抑制默认操作.
'' 
'' 
'' 
'' e 执行命令行中的指令: sed -e 'command' file
'' f 执行一个sed 脚本文件中的指令: sed -f scriptfile files
'' n 读取下一行到 pattern space
'' i 和e的区别是. e不会修改原文件的内容.只会显示修改在bash中,而i会直接修改源文件.
'' sed 规则: 从最长的最左边的子字符串.
'' 
'' 
'' e 执行的意思
'' 比如要输入 文字. 你想预先在代码里面输入好. 就需要e
'' 
'' 
'' C 替换整行 :
'' `sed '/Day/c myWholelineChanged' 1.txt`
'' 包含 Day的 整行 变成后面的 myWholelineChanged ??????
'' 
''
'' 	
''❗️常用命令❗️
'' 
'' sed "s/con/xujian/g" 1.txt                     → 替换每行所有的 con 成 xujian 
'' sed "s/con/xujian/" 1.txt                      → 替换每行第一个 con 成 xujian  一行替换一次!!!
'' sed "s/o/O/1" 1.txt                            → 替换每行的 第1个o 变成大写O
'' sed "s/o/O/3" 1.txt                            → 替换每行的 第3个o 变成大写O
'' sed "3s/now/before/" 1.txt                     → 替换第三行的 now 成 before
'' sed "3,6s/now/before/" 1.txt                   → 替换3-6行的 now 成 before
'' sed "1,3s/con/Con/g; 3,6s/sole/Sole/g" 1.txt   → 1-3行的con变成Con; 3-6行的sole变成Sole.
'' 
'' sed '1d' 1.txt              删除 首行
'' sed '$d'                    删除 尾行
'' sed '1,4d' 1.txt            删除 1-4行
'' sed '2,$d' 1.txt            删除 2-尾行.
'' sed '/get/d' 1.txt          删除 所有包含get的行.
'' sed '/[0-9]\{3\}/d' 1.txt   删除含有3位数 的行.[0-9]:匹配数字,\{3\}:3个字符.
'' sed '/^&/d' 1.txt           删除空行: ^表示开头,&表示结尾. 两者之间没有任何字符.代表空行
'' sed '/now/!d' 1.txt         删除 不含有now的行.  ! 是不的意思.
'' sed -n 's/Day//p' 1.txt     删除 Day 改成空字符串.也就是删除
'' sed -n 's/^...//p' 1.txt    删掉.每行开头前三个字符
'' sed -n 's/...$//p' 1.txt    删除每行行尾3个字符.
'' sed '/./,$!d'               删除文件顶部的所有空行
'' 
'' sed '/regex/{x;p;x;}'    添加空行语法: 上面插入一空行
'' sed '/regex/G'           添加空行语法: 下面插入一空行
'' sed '/regex/{x;p;x;G;}'  添加空行语法: 上下各插入一行  
'' sed '1{x;p;x;}' 1.txt    添加空行到首行之上
'' sed '$G' 1.txt           添加空行到尾行之下
'' sed G 1.txt              添加空行到每行下面
'' sed `G;G` 1.txt          添加两空行到在每行后面(下面)
'' sed '2G' 1.txt           添加空行到到第二行下
'' sed '1,2G' 1.txt         添加空行到第一二两行下
'' 
'' sed 's/^$/xxx/' 1.txt    整行修改: 所有行变成 xxx
'' sed '1s/^$/xxx/' 1.tx    整行修改: 首行 变成xxx
'' sed '$s/^$/xxx/' 1.tx    整行修改: 尾行 变成xxx
'' 
'' sed q 1.txt              显示第1行   
'' sed 3q 1.txt             显示前3行
'' sed -n '3p' 1.txt        显示3行
'' sed -n '2,5p' 1.txt      显示2-5行  
'' sed '$!N;$!D'            显示倒数两行 
'' sed '$!d'                显示最后一行   
'' 
'' sed 's/^/     /'         添加5个空格到每行行首 
'' sed 's/^/hello/'         添加hello  到每行行首   
'' sed 's/$/.../'           添加...    到每行行尾
'' 
'' 
'' 其他命令
'' 
'' sed -n 's/Day/day/p' 1.txt                      Day 改成 day 并显示出来. 每行只改一次.
'' sed -n 's/Day/day/pg' 1.txt                     Day 改成 day 并显示出来. 每行有多少改多少
'' 
'' sed -n '/Day/s/123/789/p' 1.txt                 先找有Day的行. 再把123换成789
'' sed -n '2,4s/B/Black/p' 1.txt                   2-4行的 B 替换成Black
'' sed -n '/Day/,/Time/s/console/Console/p' 1.txt  含有Day 到含有Time 的那几行. 其中的console 替换成Console.
'' 
'' sed -e '$!{h;d;}' -e x                          # 当文件中只有一行时，输入空行
'' sed -e '1{$q;}' -e '$!{h;d;}' -e x              # 当文件中只有一行时，显示该行
'' sed -e '1{$d;}' -e '$!{h;d;}' -e x              # 当文件中只有一行时，不输出
'' 
'' sed -n 's/\(Day\)/\1Time/p' 1.txt   ???
'' 	找到的Day的行存起来 (比如会找到很多day行.), 把第一个Day 替换成 Daytime ,显示这些含有Day的行










































## 常用正则式
'' 正则式.
	'' 1.	汉字: ^[u4e00-u9fa5]{0,}$
	'' 2.	Email: ^w+([-+.]w+)*@w+([-.]w+)*\.w+([-.]w+)*$
	'' 3.	URL: ^https?://([w-]+.)+[w-]+(/[w-./?%&=]*)?$
	'' 4.	手机号码: ^1d{10}$
	'' 5.	身份证号: ^(d{15}|d{17}(d|X))$
	'' 6.	中国邮政编码: [1-9]d{5}(?!d) (邮政编码为6位数字) 













## 最基本概念
'' *              任意个字符（包括0个）
'' ?              0个或1个字符
'' +              至少一个字符
'' .              1个任意字符.
'' ...            3个任意字符.
'' .x.            3个字符: 任意字符 + x字母 + 任意字符
'' {n}            n个字符，
'' {n,m}          n-m个字符：
'' ^              行首  
'' $              行尾
''   
'' []             表示范围
'' [A-Z]          一个大写字母
'' [a-z]          一个小写字母
'' [0-9]          一个数字
'' 
'' ^              代表非/不是 之意 ??
'' [^A-Z]         除了大写字母外的一个字符
'' [^a-zA-Z]      非英文字母的字符
'' [^a-zA-Z0-9]   非英文且非数字的字符
'' 
'' \.             代表 . 
'' \/             代表 /  处理路径时候经常用到.
'' \d             匹配一个数字，
'' \w             匹配一个字母或数字，
'' \s             匹配一个空格（也包括Tab等空白符）
'' 
'' A|B            匹配A或B


'' ^ 表示行的开头，^\d 表示必须以数字开头。
'' $ 表示行的结束，\d$ 表示必须以数字结束
'' 
'' g 表示全局匹配：
'' i 标志，表示忽略大小写，
'' m 标志，表示执行多行匹配。




## 数字匹配
'' 1.非负整数         /^\d+$/
'' 2.正整数           /^\[0-9]*\[1-9]\[0-9]*$/
'' 3.非正整数         /^((-\d+)|(0+))$/
'' 4.负整数           /^-\[0-9]*\[1-9]\[0-9]*$/
'' 5.整数             /^-?\d+$/
'' 6.非负浮点数       /^\d+(\.\d+)?$/
'' 7.正浮点数         /^((\[0-9]+\.\[0-9]*\[1-9]\[0-9]*)|(\[0-9]*\[1-9]\[0-9]*\.\[0-9]+)|(\[0-9]*\[1-9]\[0-9]*))$/
'' 8.非正浮点数       /^((-\d+(\.\d+)?)|(0+(\.0+)?))$/
'' 9.负浮点数         /^(-((\[0-9]+\.\[0-9]*\[1-9]\[0-9]*)|(\[0-9]*\[1-9]\[0-9]*\.\[0-9]+)|(\[0-9]*\[1-9]\[0-9]*)))$/
'' 10.浮点数          /^(-?\d+)(\.\d+)?$/
'' 11.数字            /^\d+(\.{1}\d+)?$/






'' date\.... 代表 date. 后面接三个字符.   如: date.txt date.png 都符合.
'' 
'' 

'' 
'' 
'' [] 空格或者字符集:  [abc]表示a或b或c, [a-zA-Z]表示所有26个字符. ^表示反 [^a]非a字符.
'' [Ss]ame     代表 Same或same
'' 

'' 









参考 待看: http://www.jianshu.com/p/89163e927a2c




换行符号: \n


🔵 单引号处理! ✔︎



如需要将文件中的Hi替换为Hello:

sed 's/Hi/Hello/g' test.txt > new_test.txt

我们注意到，sed是以单引号作为关键字的，那当我们需要处理的关键字里面包含单引号的时候，这时候改如何处理？
通常的想法是转义。如需要将文件中的’Hi’替换为’Hello’：

sed 's/\'Hi\'/\'Hello\'/g' test.txt > new_test.txt

实际上这样不起作用，这时候不能转义，

❗️❗️❗️❗️最简单的方法，就是把sed的单引号变为双引号：

sed "s/'Hi'/'Hello'/g" test.txt > new_test.txt








🔵 sed 简介
  直接编辑文本. 
  对于修改配置文件非常方便. 不在需要vi打开文件. 编辑 .再退出文件. 一行命令就搞定.






🔵 sed语法: 


sed + 功能选项 + 条件选项 
功能选项 -i  就是直接修改原文件.
条件选项







sed + 命令 + 文件路径



sed -i 's/原内容/修改后内容/g' filePath




如果字符串中含有单引号. 加\是得不到我们想要的结果的.
功能部分 先用 双引号. 这样不用反斜杆就可以输出内容.




🔵 单双 引号区别.
❗️❗️❗️单引号：对其中的内容不做任何处理。  不能用变量!!!
❗️❗️❗️双引号：先对其中的内容进行算术扩展。可以用变量!!!

单引号内 好像无法用\' 来变成 '
双引号内 好像可以用\' 来变成'


🔵 特殊符号.

内容里面经常会有特殊符号.  需要转义后才能用!
一般特殊符号 添加\ 就可以了 但是不是所有的符号都可以这样的.



/   ➜ \/
$
^
'
.



'  ➜ \'
空格 ➜ \s
[]  ➜  \[\]



🔵 删除行

sed -i '/正则式匹配行/d'
sed -i '/ALLOWED_HOSTS\s=\s\[\]/d' /home/djSite/djSite/settings.py









sed是实现对流的编辑。通常，我们使用sed可以实现内容的编辑后然后保存成另外的一个文件，如果正确的话，才写入到源文件。但是某些时候，我们需要直接修改文件，因为，保存文件到一个文件，然后再覆盖原文件的办法显得很麻烦。
其实很简单，只需要一个 -i 参数就可以了。
比如，我想替换文件中的 properties 为 property ,可以使用

sed  's/properties/property/g'  build.xml

这种方式，其实并没有修改build.xml文件的内容。如果想保存修改，通常的做法就需要重定向到另外的一个文件
sed  's/properties/property/g'  build.xml > build.xml.tmp
这样，build.xml.tmp文件就是修改后的文件.
如果无误，那么就可以用
mv build.xml.tmp build.xml
覆盖原文件。
如果想直接修改源文件，而没有这样的过程，可以用下面的命令

sed  -i 's/properties/property/g'  build.xml

这样，就直接修改了build.xml文件。




🔵 例一:

mysite/settings.py 
中的  ALLOWED_HOSTS = [] 
改成: ALLOWED_HOSTS = ["23.105.192.96", "www.0214.help"] 


语法: sed -i '/匹配行/c 修改内容' filePath



sed -i '/ALLOWED_HOSTS/c ALLOWED_HOSTS = ["23.105.192.96", "www.0214.help"] ' /home/djSite/djSite/settings.py









a命令和i命令

a命令就是append， i命令就是insert，它们是用来添加行的。如：


# 其中的1i表明，其要在第1行前插入一行（insert）
$ sed "1 i This is my monkey, my monkey's name is wukong" my.txt
This is my monkey, my monkey's name is wukong
This is my cat, my cat's name is betty
This is my dog, my dog's name is frank
This is my fish, my fish's name is george
This is my goat, my goat's name is adam
 

# 其中的1a表明，其要在最后一行后追加一行（append）
$ sed "$ a This is my monkey, my monkey's name is wukong" my.txt
This is my cat, my cat's name is betty
This is my monkey, my monkey's name is wukong
This is my dog, my dog's name is frank
This is my fish, my fish's name is george
This is my goat, my goat's name is adam





我们可以运用匹配来添加文本：

# 注意其中的/fish/a，这意思是匹配到/fish/后就追加一行
$ sed "/fish/a This is my monkey, my monkey's name is wukong" my.txt
This is my cat, my cat's name is betty
This is my dog, my dog's name is frank
This is my fish, my fish's name is george
This is my monkey, my monkey's name is wukong
This is my goat, my goat's name is adam







追加是啥子，后来网上查了一些资料，明白了，在指定行添加内容，使用/a或者/i,具体例子：
1
sed '/2/i\add a new line' -i install.log
在第二行前添加一行信息命令如上，
1
sed '/3/a\add a new line' -i install.log








