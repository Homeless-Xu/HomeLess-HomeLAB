@: 1986-10-01-柏克莱封包过滤器（BPF）
---
layout: post
title: 柏克莱封包过滤器（BPF）
tags: Wireshark
categories: Tooles
---


Berkeley Packet Filter，缩写 BPF

洪泛模式/混杂模式
如果网卡支持这种模式, 当网卡处于此种模式，可以收到网络上的所有包，不管他们的目的地是不是所在主机。









@: 1986-10-01-网络协议
---
layout: post
title: 网络协议
tags: Wireshark
categories: Tooles
---


 维基百科 : 网络协议详解
[https://zh.wikipedia.org/wiki/Category:%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE]

我们知道网络协议有N种。。。我列一下常用的几种

IP协议


ARP协议



TR协议

IPv6协议


LLMNR : 
在DNS 服务器不可用时，客户端计算机可以使用 LLMNR 来解析本地网段上的名称。
wins  或者  dns  都需要服务器 才能正常运行    而 llmnr 则不需要服务器.

WINS: 
Windows Internet Name Service， Windows互联网名称服务
一种网络名称转换服务，它可以将 NetBIOS 电脑名称转换为对应的IP地址。

NetBIOS:
网络基本输入输出系统 Network Basic Input/Output System
通过此协议 : 解析别的电脑的计算机名 为相应的ip 地址 实现信息通信.
所以几乎所有的局域网都是在NetBIOS协议的基础上工作的。

DNS:
Domain Name System，域名系统
ip地址不好记就有了域名(网址), 域名解析: 把域名解析成对应的 IP

 





@: 1986-10-01-封包详细信息
---
layout: post
title: 封包详细信息
tags: Wireshark
categories: Tooles
---




## 封包详细信息
这块内容是最重要的   查看协议中的每一个字段

Frame:   —————————————————————————————————物理层的数据帧概况  osi 1
Ethernet II: ——————————————————————————数据链路层以太网帧头部信息 osi 2
Internet Protocol Version 4: —————————————互联网层IP包头部信息 osi 3 Transmission Control Protocol:  ———————传输层T的数据段头部信息，此处是TCP osi 4 Hypertext Transfer Protocol:  ——————应用层的信息，此处是HTTP协议  osi7




TCP 包 具体内容  双击要查看的行  就能弹窗看到详细信息
source port:56451 (56451)          源端口号
destination port: 80 (80)   目的端口号
stream index:5 
TCP segment len:0
sequence number:0         ;  seq 数据流 号码
Flags:0x002 (SYN)         ;这个就是 SYN 标志  请求建立连接用的.



length:47       报头长度
checksum: 0x8c66 validation disable        校验和    验证 good checksum: false 假
bad checksum:false
stream index: 0   流  指数






封包 - 资料包
一个自我完备的独立资料实体，携带着足够的资讯.
它能够从源头，选取路径，最终到达目的电脑，而不用依赖起始电脑、目的电脑以及传输网络预先交换的资讯









@: 1986-10-01-TCP三次握手
---
layout: post
title: TCP三次握手
tags: Wireshark
categories: Tooles
---



TCP三次握手
TCP 报文:  分首部  和 数据 两个部分
首部 默认是 20 字节长度.也就是 160bits            1字节(Byte)=8 bits 
【源端口】- 16bit   来源处的端口号；

【目的端口】- 16bit   目的处的端口号；

【序号】- 32bit
每一个TCP报文段都会有一个序号，序号字段的值其实是本报文段所发送的数据的第一个字节的序号。这是因为TCP是面向连接的可靠服务，其每一个字节都会对应一个序号，通过序号来确保服务的可靠性和有序性。

【确认号】- 32bit
确认号，是期望收到对方的下一个报文段的数据的第一个字节的序号。（这句话有些拗口，但是在后面我们讲解三次握手和四次挥手时，大家会更深刻的理解这句话的含义）

【数据偏移】- 4bit
其实它本质上就是“首部长度”，因为“数据偏移”是指TCP报文段的数据部分的起始处距离TCP报文段的起始处的距离。（仍然很拗口，但相信你能明白）。
数据偏移总共占4bit，因此最大能表示的数值为15。而数据偏移的单位是“4字节”，此处的设计和IP数据报的设计是完全相同的，所以说TCP报文段首部的长度最长为15×4=60字节，且首部长度必须为4字节的整数倍。

【保留字段】- 6bit
这6bit在标准中是保留字段，我猜测，有两个目的，第一个是预留除URG/ACK/PSH/RST/SYN/FIN/之外的冗余功能位；第二个是为了对其字节位。

【紧急字段URG】- 1bit
此字段告诉系统此报文段中有紧急数据，应尽快传送。当URG=1时，

【确认字段ACK】- 1bit
当ACK=1时，表示确认，且确认号有效；当ACK=0时，确认号字段无效。

【推送字段PSH】- 1bit
当PSH=1时，则报文段会被尽快地交付给目的方，不会对这样的报文段使用缓存策略。

【复位字段RST】- 1bit
当RST为1时，表明TCP连接中出现了严重的差错，必须释放连接，然后再重新建立连接。

【同步字段SYN】- 1bit
当SYN=1时，表示发起一个连接请求。

【终止字段FIN】- 1bit
用来释放连接。当FIN=1时，表明此报文段的发送端的数据已发送完成，并要求释放连接。

【窗口字段】- 16bit
此字段用来控制对方发送的数据量，单位为字节。
一般TCP连接的其中一端会根据自身的缓存空间大小来确定自己的接收窗口大小，然后告知另一端以确定另一端的发送窗口大小。

【校验和字段】- 16bit
这个校验和是针对首部和数据两部分的。

【紧急指针字段】- 16bit
紧急指针指出在本报文段中的紧急数据的最后一个字节的序号。





三次握手 : Three-way handshake
一个虚拟的链接的建立  是通过三次握手 来实现的 
SYN: synchronous 是TCP/IP建立连接时使用的握手信号。
ACK: 确认标志 
 SYN/ACK 包: 确认包  仅仅是 SYN 和 ACK 标记为1 的 TCP 包




客户端 要和 服务器 通讯: 
第一次握手:     客户端  发一个 SYN=1 ACK=0 的TCP包                表示:  请求进行连接.
只是请求/试探/询问是否可以连接服务器,服务器同意连的话 
还是要客户端再确认一次(也就是第三次握手)才正式连接. 
  
  
第二次握手:     服务器收到请求并允许进行连接的话  发一个 SYN=1  ACK=1  的 TCP 包给客户端  表示: 可以连接了 并 要求客户端返回一个确认数据包 确认进行连接 (有可能 客户端只是问问能不能链接)


第三次握手:   客户端  发一个SYN=0，ACK=1的数据包给服务器，告诉服务器我确实要建立连接 而不是耍你… 正式连接成功
 



 

连接成功以后: TCP 的每个包 都会设置 ACK 位
这就是连接跟踪 很重要的原因了 没有跟踪的话防火墙无法判断 收到的 ACK 包是不是属于一个已经建立的链接. 
 







在客户机和服务器之间建立正常的TCP网络连接时，
首先 客户端发出一个包含SYN标志的数据包
然后 服务器 返回 SYN+ACK的应答包  表示接收到了这个消息，
最后 客户机再返回一个ACK确认包响应。
这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。
当服务器发送应答包后 没收到确认包 服务器就会进入等待直到超时
等待期间 这些半链接的客户端都保存在一个有限的缓存列表中 
如果有大量的 syn 包发给服务器 而且又不回应服务器的话 会造成 tcp 资源迅速耗尽  直到服务器系统崩溃 








客户端          服务端
客户端发送 syn 报文 并发送序号为 x   syn=1 seq=x

服务器发送 syn+ack 报文  发送序号为 y 确认序号 x+1

客户端发送 ack 报文 发送序号为 z 确认序号 y+1












wireshark  TCP 握手 实测:
显示过滤里 设置  tcp.stream eq 5 然后打开一个网站   wireshark 里就能 看到3个 数据了  这就是三次握手包






@: 1986-10-01-TCP-UDP
---
layout: post
title: TCP/UDP
tags: Wireshark
categories: Tooles
---

## TCP (Transmission Control Protocol) 对应的是可靠性要求高的应用.

## UDP (User Datagram Protocol)
对应的则是可靠性要求低、传输经济的应用.

TCP提供IP环境下的数据可靠传输.
它提供的服务包括数据流传送、可靠性、有效流控、全双工操作和多路复用。通过面向连接、端到端和可靠的数据包发送。
通俗说，它是事先为所发送的数据开辟出连接好的通道，然后再进行数据发送；

UDP则不为IP提供可靠性、 流控或差错恢复功能。



TCP支持的应用协议主要 有：
Telnet、FTP、SMTP等；

UDP支持的应用层协议主要有：
NFS（网络文件系统）、SNMP（简单网络管理协议）、
DNS（主域名称系 统）、TFTP（通用文件传输协议）等.

TCP/IP协议与低层的数据链路层和物理层无关，这也是TCP/IP的重要特点





@: 1986-10-01-ip 掩码
---
layout: post
title: ip 掩码
tags: Wireshark
categories: Tooles
---



ip 掩码
/23是从192.168.0.1-192.168.1.254都是有效的主机地址

由于你的子网掩码是23位（二进制），所以只要你的IP后9为（二进制）不是9个0或9个1都能用。192.168.0.255后9位为0.11111111.，192.168.1.0的后9位1.00000000.，所以可以使用。

不要犹豫，当掩码不同时，本来不可用的那些IP是可能可以用的。一个IP在某个掩码时可能它是网络号或是广播地址，但到了另一个掩码，它就只是普通的IP地址。应该说在任何情况下都不能用的IP只有0.0.0.0　255.255.255.255  127.0.0.1等这种特殊的IP地址






